import React from 'react';

import { storiesOf } from '@storybook/react';
import { action } from '@storybook/addon-actions';
import { withState } from 'recompose';
import preventDefault from '../src/lib/preventDefault';
// import { linkTo } from '@storybook/addon-links';
import {
  FlatButton,
  RaisedButton,
  ButtonPrimary,
  ButtonSecondary,
  ButtonTertiary,
  IconButton,
  ToggleButton,
} from '../src/atoms/buttons';
import {
  TextField,
  TextArea,
  SelectField,
  MultiSelectField,
  SelectCustomFieldInput,
  AccordionField,
  MenuItem,
  RadioButtonGroup,
  RadioButton,
  CheckBox,
  Slider,
} from '../src/atoms/form';
import { ListItem, Subheader } from '../src/atoms/typography';
import { Reveal } from '../src/atoms/reveal';
import { NavTitle, NavItem, NavContainer, NavItemWithSubItems } from '../src/molecules/navigation';
import { TabCloud, TabItem } from '../src/molecules/tab';
import { TopBar, TopBarItem } from '../src/molecules/topbar';
import { Icon, IconText, HelpIcon } from '../src/atoms/icons';
import { Breadcrumbs } from '../src/molecules/breadcrumbs';
import { Pagination } from '../src/molecules/pagination';
import { Modal } from '../src/atoms/modal';
import { Table, SORT_ASCENDING } from '../src/molecules/table';
import { OrderTable, TableBody } from '../src/molecules/OrderTable';
import Tooltip from '../src/atoms/tooltip';
import Stripe from '../src/atoms/stripe';
import { ConfirmDelete } from '../src/molecules/confirmDelete';

function addDocs(Component) {
  return { inline: false, source: true, header: false, propTables: [Component] };
}

const commonProps = {};

function PaddingWrapper(storyFn) {
  return <div style={{ maxWidth: '50%', padding: '1.6rem', margin: '0 auto' }}>{storyFn()}</div>;
}

const breadcrumbsLinks = [
  {
    url: '/first-path',
    label: 'First',
  },
  {
    url: '/second-path',
    label: 'Second',
  },
  {
    url: '/third-path',
    label: 'Third',
  },
  {
    url: 'http://google.com',
    label: 'And Fourth (To Google)',
  },
];

const pagination = {
  currentPage: 0,
  totalPages: 5,
};
const paginationOnClick = (index) => {
  pagination.currentPage = index;
  action('Page Clicked')(index);
};

const tabCloud = {
  currentTab: 'general',
};
const tabOnClick = tab => () => {
  tabCloud.currentTab = tab;
  action('Tab Clicked')(tab);
};

const AccordionContents = (<MultiSelectField
  label="State"
  name="regions"
  defaultValue={''}
  onChange={action('selected')}
  placeholder="Select An Option"
  {...commonProps}
  id="accordion-contents"
>
  <MenuItem value="AZ" label="Arizona" id="state-az" />
  <MenuItem value="IL" label="Illinois" id="state-il" />
  <MenuItem value="OR" label="Oregon" id="state-or" />
  <MenuItem value="CA" label="California" id="state-ca" />
  <MenuItem value="GSNTHABOL" label="Giantstatenamethathasabunchofletters" id="state-gs" />
</MultiSelectField>);

storiesOf('ButtonPrimary', module)
  .addWithInfo(
    'with label',
    () => <ButtonPrimary label="Button Primary" onClick={action('clicked')} {...commonProps} />,
    addDocs(ButtonPrimary),
  )
  .addWithInfo(
    'with icon and label',
    () => (
      <ButtonPrimary label="Layers" icon="layers" onClick={action('clicked')} {...commonProps} />
    ),
    addDocs(ButtonPrimary),
  )
  .addWithInfo(
    'disabled with label',
    () => (
      <ButtonPrimary label="Button Primary" onClick={action('clicked')} {...commonProps} disabled />
    ),
    addDocs(ButtonPrimary),
  )
  .addWithInfo(
    'disabled with icon and label',
    () => (
      <ButtonPrimary
        label="Layers"
        icon="layers"
        onClick={action('clicked')}
        {...commonProps}
        disabled
      />
    ),
    addDocs(ButtonPrimary),
  );

storiesOf('ButtonSecondary', module)
  .addWithInfo(
    'with label',
    () => <ButtonSecondary {...commonProps} label="Button Secondary" onClick={action('clicked')} />,
    addDocs(ButtonSecondary),
  )
  .addWithInfo(
    'with icon and label',
    () => (
      <ButtonSecondary {...commonProps} label="Layers" icon="layers" onClick={action('clicked')} />
    ),
    addDocs(ButtonSecondary),
  )
  .addWithInfo(
    'disabled with label',
    () => (
      <ButtonSecondary
        {...commonProps}
        label="Button Secondary"
        onClick={action('clicked')}
        disabled
      />
    ),
    addDocs(ButtonSecondary),
  )
  .addWithInfo(
    'disabled with icon and label',
    () => (
      <ButtonSecondary
        {...commonProps}
        label="Layers"
        icon="layers"
        onClick={action('clicked')}
        disabled
      />
    ),
    addDocs(ButtonSecondary),
  );

storiesOf('ButtonTertiary', module)
  .addWithInfo(
    'with label',
    () => <ButtonTertiary {...commonProps} label="Button Tertiary" onClick={action('clicked')} />,
    addDocs(ButtonTertiary),
  )
  .addWithInfo(
    'with icon and label',
    () => (
      <ButtonTertiary {...commonProps} label="Layers" icon="layers" onClick={action('clicked')} />
    ),
    addDocs(ButtonTertiary),
  )
  .addWithInfo(
    'disabled with label',
    () => (
      <ButtonTertiary
        {...commonProps}
        label="Button Tertiary"
        onClick={action('clicked')}
        disabled
      />
    ),
    addDocs(ButtonTertiary),
  )
  .addWithInfo(
    'disabled with icon and label',
    () => (
      <ButtonTertiary
        {...commonProps}
        label="Layers"
        icon="layers"
        onClick={action('clicked')}
        disabled
      />
    ),
    addDocs(ButtonTertiary),
  );

storiesOf('ToggleButton', module)
  .addWithInfo(
    'without label',
    () => (
      <div style={{ maxWidth: '200px' }}>
        <ToggleButton {...commonProps} onClick={action('clicked')} />
      </div>),
    addDocs(ToggleButton),
  )
  .addWithInfo(
    'with label',
    () => (
      <div style={{ maxWidth: '200px' }}>
        <ToggleButton {...commonProps} label="Toggle Button" onClick={action('clicked')} />
      </div>),
    addDocs(ToggleButton),
  )
  .addWithInfo(
    'disabled with label',
    () => (
      <div style={{ maxWidth: '200px' }}>
        <ToggleButton {...commonProps} label="Toggle Button" onClick={action('clicked')} disabled />
      </div>),
    addDocs(ToggleButton),
  );

storiesOf('IconButton', module)
  .addWithInfo(
    'with default icon',
    () => (
      <div>
        <IconButton {...commonProps} icon="plus" onClick={action('clicked')} />
        <IconButton {...commonProps} icon="layers" onClick={action('clicked')} />
        <IconButton {...commonProps} icon="plus" onClick={action('clicked')} hasCircle />
        <IconButton {...commonProps} icon="layers" onClick={action('clicked')} hasCircle />
      </div>
    ),
    addDocs(IconButton),
  )
  .addWithInfo(
    'with large icon',
    () => (
      <div>
        <IconButton {...commonProps} icon="plus" onClick={action('clicked')} className="large" />
        <IconButton {...commonProps} icon="layers" onClick={action('clicked')} className="large" />
        <IconButton
          {...commonProps}
          icon="plus"
          onClick={action('clicked')}
          className="large"
          hasCircle
        />
        <IconButton
          {...commonProps}
          icon="layers"
          onClick={action('clicked')}
          className="large"
          hasCircle
        />
      </div>
    ),
    addDocs(IconButton),
  )
  .addWithInfo(
    'with small icon',
    () => (
      <div>
        <IconButton {...commonProps} icon="plus" onClick={action('clicked')} className="small" />
        <IconButton {...commonProps} icon="layers" onClick={action('clicked')} className="small" />
        <IconButton
          {...commonProps}
          icon="plus"
          onClick={action('clicked')}
          className="small"
          hasCircle
        />
        <IconButton
          {...commonProps}
          icon="layers"
          onClick={action('clicked')}
          className="small"
          hasCircle
        />
      </div>
    ),
    addDocs(IconButton),
  )
  .addWithInfo(
    'with color',
    () => (
      <div>
        <div>
          <IconButton {...commonProps} icon="plus" onClick={action('clicked')} />
          <IconButton {...commonProps} icon="plus" onClick={action('clicked')} className="green" />
          <IconButton {...commonProps} icon="plus" onClick={action('clicked')} className="blue" />
          <IconButton {...commonProps} icon="plus" onClick={action('clicked')} hasCircle />
          <IconButton
            {...commonProps}
            icon="plus"
            onClick={action('clicked')}
            className="green"
            hasCircle
          />
          <IconButton
            {...commonProps}
            icon="plus"
            onClick={action('clicked')}
            className="blue"
            hasCircle
          />
        </div>
        <div>
          <IconButton {...commonProps} icon="map-marker" onClick={action('clicked')} />
          <IconButton
            {...commonProps}
            icon="map-marker"
            onClick={action('clicked')}
            className="green"
          />
          <IconButton
            {...commonProps}
            icon="map-marker"
            onClick={action('clicked')}
            className="blue"
          />
          <IconButton {...commonProps} icon="map-marker" onClick={action('clicked')} hasCircle />
          <IconButton
            {...commonProps}
            icon="map-marker"
            onClick={action('clicked')}
            className="green"
            hasCircle
          />
          <IconButton
            {...commonProps}
            icon="map-marker"
            onClick={action('clicked')}
            className="blue"
            hasCircle
          />
        </div>
      </div>
    ),
    addDocs(IconButton),
  );

storiesOf('FlatButton (Deprecated)', module).addWithInfo(
  'with label',
  () => <FlatButton label="My Button" onClick={action('clicked')} {...commonProps} />,
  addDocs(FlatButton),
);

storiesOf('RaisedButton (Deprecated)', module).addWithInfo(
  'with label',
  () => <RaisedButton {...commonProps} label="My Button" onClick={action('clicked')} />,
  addDocs(RaisedButton),
);

const TwoWayTextField = withState('textValue', 'onChange', 'Stuff')(({ textValue, onChange }) => {
  action('twoWayValue')(textValue);
  return (
    <TextField
      {...commonProps}
      label="First Name"
      name="firstName"
      hintText="First Name"
      value={textValue}
      onChange={onChange}
    />
  );
});

const AutocompleteTextField = withState('textValue', 'onChange', '')(({ textValue, onChange }) => {
  action('autocomplete')(textValue);
  const autocompleteItems = [
    {
      id: '$name',
      label: '$name$',
    },
    {
      id: '$var2$',
      label: '$var2$',
    },
    {
      id: '$var3$',
      label: '$var3$',
    },
  ];
  return (
    <TextField
      {...commonProps}
      label="Titles with Variables"
      name="titlesWithVariables"
      hintText="Type $ for Autocomplete"
      value={textValue}
      onChange={onChange}
      autocompleteItems={autocompleteItems}
    />
  );
});

storiesOf('TextField', module)
  .addDecorator(PaddingWrapper)
  .addWithInfo(
    'default state',
    () => (
      <TextField
        {...commonProps}
        label="First Name"
        name="firstName"
        hintText="First Name"
        id="text-field-id"
      />
    ),
    addDocs(TextField),
  )
  .addWithInfo(
    'is disabled',
    () => (
      <TextField
        {...commonProps}
        className={'disabled'}
        label="First Name"
        name="firstName"
        hintText="First Name"
        disabled
      />
    ),
    addDocs(TextField),
  )
  .addWithInfo(
    'with pre-existing value',
    () => (
      <TextField
        {...commonProps}
        label="First Name"
        name="firstName"
        hintText="First Name"
        defaultValue={'John'}
      />
    ),
    addDocs(TextField),
  )
  .addWithInfo('with two way databinding', () => <TwoWayTextField />, addDocs(TextField))
  .addWithInfo(
    'with invalid value',
    () => (
      <TextField
        {...commonProps}
        className={'invalid wrapper'}
        label="First Name"
        name="firstName"
        hintText="First Name"
        defaultValue={'John'}
      />
    ),
    addDocs(TextField),
  )
  .addWithInfo(
    'with hex code',
    () => (
      <TextField
        {...commonProps}
        label="Hex Code"
        name="hexCode"
        hintText="Hex Code"
        defaultValue={'#82bc00'}
        hexCode
      />
    ),
    addDocs(TextField),
  )
  .addWithInfo(
    'with iconic code',
    () => (
      <TextField
        {...commonProps}
        label="Iconic Code"
        name="iconicCode"
        hintText="Iconic Code"
        defaultValue={'layers'}
        iconic
      />
    ),
    addDocs(TextField),
  )
  .addWithInfo('with autocomplete using $', () => <AutocompleteTextField />, addDocs(TextField));

storiesOf('TextArea', module)
  .addDecorator(PaddingWrapper)
  .addWithInfo(
    'default state',
    () => (
      <TextArea
        {...commonProps}
        label="Description Field"
        name="descriptionField"
        hintText="This is a description."
        id="text-area-id"
        rows={10}
        resize
        maxLength={10}
      />
    ),
    addDocs(TextArea),
  );

/* Select Field */
const SelectFieldWithState = withState('color', 'setColor', 'red')(({ color, setColor }) => (
  <div>
    <SelectField
      label="What color is it?"
      name="whatColorIsIt"
      value={color}
      onChange={value => setColor(value)}
    >
      <MenuItem value="red" label="It is red." id="red" />
      <MenuItem value="blue" label="It is blue." id="blue" />
    </SelectField>
    <br />
    <p> The value will update with props: </p>
    <RadioButtonGroup name="color-selectors" value={color} onChange={value => setColor(value)}>
      <RadioButton value="red" label="Red" />
      <RadioButton value="blue" label="Blue" />
    </RadioButtonGroup>
  </div>
));

storiesOf('SelectField', module)
  .addDecorator(PaddingWrapper)
  .addWithInfo(
    'default state',
    () => (
      <SelectField
        label="State"
        name="regions"
        defaultValue={''}
        onChange={action('selected')}
        {...commonProps}
      >
        <MenuItem value="" label="Select One...." id="state-select" />
        <MenuItem value="AZ" label="Arizona" id="state-az" />
        <MenuItem value="IL" label="Illinois" id="state-il" />
        <MenuItem value="OR" label="Oregon" id="state-or" />
      </SelectField>
    ),
    addDocs(SelectField),
  )
  .addWithInfo(
    'pre-selected value',
    () => (
      <SelectField
        label="State"
        defaultValue="IL"
        name="regions"
        onChange={action('selected')}
        {...commonProps}
      >
        <MenuItem value="" label="Select One...." id="state-select" />
        <MenuItem value="AZ" label="Arizona" id="state-az" />
        <MenuItem value="IL" label="Illinois" id="state-il" />
        <MenuItem value="OR" label="Oregon" id="state-or" />
      </SelectField>
    ),
    addDocs(SelectField),
  )
  .addWithInfo(
    'invalid value',
    () => (
      <SelectField
        label="State"
        defaultValue="IL"
        name="regions"
        onChange={action('selected')}
        {...commonProps}
        className={'invalid'}
      >
        <MenuItem value="" label="Select One...." id="state-select" />
        <MenuItem value="AZ" label="Arizona" id="state-az" />
        <MenuItem value="IL" label="Illinois" id="state-il" />
        <MenuItem value="OR" label="Oregon" id="state-or" />
      </SelectField>
    ),
    addDocs(SelectField),
  )
  .addWithInfo('with state', () => (
    <div>
      <SelectFieldWithState />
    </div>
  ));

const MultiSelectWithState = withState('states', 'updateState', ['AZ', 'IL'])(({ states, updateState }) => (<MultiSelectField
  label="State"
  value={states}
  name="regions"
  onChange={updateState}
  placeholder="Search..."
  {...commonProps}
  id="multi-select-states-pre-select"
>
  <MenuItem value="AZ" label="Arizona" id="state-az" />
  <MenuItem value="IL" label="Illinois" id="state-il" />
  <MenuItem value="OR" label="Oregon" id="state-or" />
  <MenuItem value="CA" label="California" id="state-ca" />
  <MenuItem value="GSNTHABOL" label="Giantstatenamethathasabunchofletters" id="state-gs" />
  <MenuItem value="ND" label="North Dakota" id="state-nd" />
  <MenuItem value="SD" label="South Dakota" id="state-sd" />
  <MenuItem value="MI" label="Michigan" id="state-mi" />
  <MenuItem value="MN" label="Minnesota" id="state-mn" />
  <MenuItem value="NC" label="North Carolina" id="state-nc" />
  <MenuItem value="SC" label="South Carolina" id="state-sc" />
  <MenuItem value="VA" label="Virginia" id="state-va" />
  <MenuItem value="FL" label="Florida" id="state-fl" />
</MultiSelectField>));

storiesOf('MultiSelectField', module)
  .addDecorator(PaddingWrapper)
  .addWithInfo(
    'default state',
    () => (
      <MultiSelectField
        label="State"
        name="regions"
        defaultValue={''}
        onChange={action('selected')}
        placeholder="Select An Option"
        {...commonProps}
        id="multi-select-states-default"
      >
        <MenuItem value="AZ" label="Arizona" id="state-az" />
        <MenuItem value="IL" label="Illinois" id="state-il" />
        <MenuItem value="OR" label="Oregon" id="state-or" />
        <MenuItem value="CA" label="California" id="state-ca" />
        <MenuItem value="GSNTHABOL" label="Giantstatenamethathasabunchofletters" id="state-gs" />
      </MultiSelectField>
    ),
    addDocs(MultiSelectField),
  )
  .addWithInfo(
    'pre-selected value',
    () => (
      <MultiSelectWithState />
    ),
    addDocs(MultiSelectField),
  )
  .addWithInfo(
    'invalid value',
    () => (
      <MultiSelectField
        label="State"
        name="regions"
        onChange={action('selected')}
        placeholder="Select None"
        {...commonProps}
        className={'invalid'}
        id="multi-select-states-invalid"
      >
        <MenuItem value="AZ" label="Arizona" id="state-az" />
        <MenuItem value="IL" label="Illinois" id="state-il" />
        <MenuItem value="OR" label="Oregon" id="state-or" />
        <MenuItem value="CA" label="California" id="state-ca" />
        <MenuItem value="GSNTHABOL" label="Giantstatenamethathasabunchofletters" id="state-gs" />
      </MultiSelectField>
    ),
    addDocs(MultiSelectField),
  );

/* Select Custom Field w Input */
storiesOf('SelectCustomFieldInput', module)
    .addDecorator(PaddingWrapper)
    .addWithInfo(
      'default state',
      () => (
        <div>
          <SelectCustomFieldInput
            label="State"
            name="regions"
            defaultValue={''}
            onChange={action('selected')}
            {...commonProps}
          >
            <MenuItem value="" label="Select One...." id="state-select" />
            <MenuItem value="AZ" label="Arizona" id="state-az" />
            <MenuItem value="IL" label="Illinois" id="state-il" />
            <MenuItem value="OR" label="Oregon" id="state-or" />
          </SelectCustomFieldInput>
        </div>
      ),
      addDocs(SelectCustomFieldInput),
    );

storiesOf('AccordionField', module)
  .addDecorator(PaddingWrapper)
  .addWithInfo(
    'default state',
    () => (
      <div>
        <AccordionField
          label="States"
          disableRowClick
          expandId="id1"
          onChange={action('selected')}
          contents={AccordionContents}
          showContents={false}
          {...commonProps}
        />
        <AccordionField
          label="New States"
          expandId="id2"
          onChange={action('selected')}
          contents={AccordionContents}
          showContents={false}
          {...commonProps}
        />
      </div>
    ),
    addDocs(AccordionField),
  );

storiesOf('RadioButtonGroup', module)
  .addWithInfo(
    'default state',
    () => (
      <RadioButtonGroup name="role" {...commonProps}>
        <RadioButton value="admin" label="Admin" id="radio-button-admin" />
        <RadioButton value="mod" label="Moderator" />
        <RadioButton value="user" label="User" />
      </RadioButtonGroup>
    ),
    addDocs(RadioButtonGroup),
  )
  .addWithInfo(
    'pre-selected value',
    () => (
      <RadioButtonGroup
        name="role"
        defaultValue={'user'}
        onChange={action('selected')}
        {...commonProps}
      >
        <RadioButton value="admin" label="Admin" />
        <RadioButton value="mod" label="Moderator" />
        <RadioButton value="user" label="User" />
      </RadioButtonGroup>
    ),
    addDocs(RadioButtonGroup),
  );

storiesOf('CheckBox', module)
  .addWithInfo(
    'default state',
    () => (
      <CheckBox
        {...commonProps}
        label="Should Toggle?"
        name="shouldToggle"
        onChange={action('toggled')}
        id={'checkbox-id'}
      />
    ),
    addDocs(CheckBox),
  )
  .addWithInfo(
    'is checked',
    () => (
      <CheckBox
        {...commonProps}
        label="Should Toggle?"
        name="shouldToggle"
        defaultChecked
        onChange={action('toggled')}
      />
    ),
    addDocs(CheckBox),
  );

storiesOf('Subheader', module).addWithInfo(
  'with Text',
  () => <Subheader {...commonProps}>Lorem ipsum dolor.</Subheader>,
  addDocs(Subheader),
);

storiesOf('ListItem', module).addWithInfo(
  'with Text',
  () => <ListItem {...commonProps}>Lorem ipsum dolor.</ListItem>,
  addDocs(Subheader),
);

storiesOf('Reveal', module)
  .addWithInfo(
    'should show children',
    () => (
      <Reveal shouldReveal {...commonProps}>
        Lorem ipsum dolor.
      </Reveal>
    ),
    addDocs(Reveal),
  )
  .addWithInfo(
    'should do a css hide on children',
    () => (
      <Reveal shouldReveal={false} {...commonProps}>
        Lorem ipsum dolor.
      </Reveal>
    ),
    addDocs(Reveal),
  );

storiesOf('Typography', module).add('standard type', () => (
  <div {...commonProps} className="pad-x pad-y">
    <h1>h1 Lorem Ipsum</h1>
    <h2>h2 Lorem Ipsum</h2>
    <h3>h3 Lorem Ipsum</h3>
    <h4>h4 Lorem Ipsum</h4>
    <h2 className="with-border">h2.with-border Lorem Ipsum</h2>
    <h3 className="with-border">h3.with-border Lorem Ipsum</h3>
    <Subheader>
      Subheader At atque autem delectus doloremque dolores doloribus earum et, eum eveniet facere,
      inventore nesciunt numquam quaerat recusandae.{' '}
    </Subheader>
    <p>
      p Lorem ipsum dolor sit amet, <a href="#stuff">consectetur adipisicing elit.</a> At atque
      autem delectus doloremque dolores doloribus earum et, eum eveniet facere, inventore nesciunt
      numquam quaerat recusandae, reiciendis repellat velit veniam voluptatem.
    </p>
    <p className="small">
      p.small Lorem ipsum dolor sit amet, <a href="#stuff">consectetur adipisicing elit.</a> At
      atque autem delectus doloremque dolores doloribus earum et, eum eveniet facere, inventore
      nesciunt numquam quaerat recusandae, reiciendis repellat velit veniam voluptatem.
    </p>
  </div>
));

storiesOf('Sample Form', module).add('layout', () => (
  <div className="container pad-y">
    <div className="flex-grid pad-y">
      <div className="col last">
        <h1>Headline 1 - Roboto Light</h1>
      </div>
    </div>
    <div className="flex-grid">
      <div className="col last">
        <Subheader>
          Subheader At atque autem delectus doloremque dolores doloribus earum et, eum eveniet
          facere, inventore nesciunt numquam quaerat recusandae.
        </Subheader>
      </div>
    </div>
    <div className="flex-grid">
      <div className="col last">
        <TextField name="viewName" hintText="My View..." label="View Name" />
      </div>
    </div>
    <div className="flex-grid">
      <div className="col last">
        <TextField
          className={'invalid'}
          name="labelHere"
          hintText="My Field..."
          label="Label Here"
        />
      </div>
    </div>
    <div className="flex-grid pad-y">
      <div className="col">
        <div className="pad-y">
          <SelectField
            name="regions"
            defaultValue={''}
            onChange={action('selected')}
            {...commonProps}
          >
            <MenuItem value="" label="Select One...." id="state-select" />
            <MenuItem value="AZ" label="Arizona" id="state-az" />
            <MenuItem value="IL" label="Illinois" id="state-il" />
            <MenuItem value="OR" label="Oregon" id="state-or " />
          </SelectField>
        </div>
        <div className="pad-y">
          <SelectField
            name="options"
            defaultValue={''}
            onChange={action('selected')}
            {...commonProps}
          >
            <MenuItem value="" label="Select One...." id="options-select" />
            <MenuItem value="1" label="Option 1" id="option-1" />
            <MenuItem value="2" label="Option 2" id="option-2" />
            <MenuItem value="3" label="Option 3" id="option-3" />
          </SelectField>
        </div>
      </div>
      <div className="col last pad-y">
        <h4 className="with-border">Headline 3 - Roboto Black</h4>
        <RadioButtonGroup
          name="selectedOption"
          defaultValue={'selected'}
          onChange={action('selected')}
        >
          <RadioButton value="selected" label="Selected" />
          <RadioButton value="notselected" label="Not Selected" />
        </RadioButtonGroup>
      </div>
    </div>
    <div className="flex-grid pad-y">
      <div className="col">
        <ButtonSecondary className={'full-width'} label="Cancel" useButtonElement />
      </div>
      <div className="col last">
        <input type="submit" className={'button button-primary full-width'} value="Submit" />
      </div>
    </div>
  </div>
));

storiesOf('Grid', module).add('columns', () => (
  <div className="demo-grid pad-x pad-y">
    <p>.flex-grid</p>
    <div className="flex-grid pad-y">
      <div className="col pad-y">
        <div className="box">.col</div>
      </div>
      <div className="col last pad-y">
        <div className="box">.col.last</div>
      </div>
    </div>
    <p>.flex-grid</p>
    <div className="flex-grid pad-y">
      <div className="col pad-y">
        <div className="box">.col</div>
      </div>
      <div className="col pad-y">
        <div className="box">.col</div>
      </div>
      <div className="col last pad-y">
        <div className="box">.col.last</div>
      </div>
    </div>
    <p>.flex-grid</p>
    <div className="flex-grid pad-y">
      <div className="col pad-y">
        <div className="box">.col</div>
      </div>
      <div className="col pad-y">
        <div className="box">.col</div>
      </div>
      <div className="col pad-y">
        <div className="box">.col</div>
      </div>
      <div className="col last pad-y">
        <div className="box">.col.last</div>
      </div>
    </div>
  </div>
));

const navSubItems = [
  {
    label: 'New Instance',
    linkTo: '/',
    icon: 'circle-x',
  },
  {
    label: 'Dev 1',
    linkTo: '/',
  },
  {
    label: 'Dev 2',
    linkTo: '/',
  },
  {
    label: 'Test 1',
    linkTo: '/',
  },
  {
    label: 'Test 2',
    linkTo: '/',
  },
  {
    label: 'Prod 1',
    linkTo: '/',
  },
  {
    label: 'Prod 2',
    linkTo: '/',
  }];
storiesOf('Nav', module).addWithInfo('with nav container', () => (
  <NavContainer topPadding="50px">
    <NavTitle linkTo="/" label="Storm Center" />
    <NavItemWithSubItems
      label="Instances"
      icon="spreadsheet"
      subItems={[...navSubItems, ...navSubItems, ...navSubItems]}
      id="nav-link-instances"
    />
    <NavItem linkTo="/" label="Create Instance" icon="plus" />
    <NavItem linkTo="/" label="Regions" icon="map-marker" />
    <NavItem linkTo="/" label="Thematics" icon="layers" />
    <NavItem linkTo="/" label="Feeds" icon="route" />
  </NavContainer>
));

storiesOf('TopBar', module)
  .addWithInfo(
    'with topbar items',
    () => (
      <TopBar>
        <TopBarItem>
          <Tooltip align="middle" tooltip={<p style={{ width: '150px' }}>Return To Tenant Selection</p>}>
            <a className="icon-link" href="#stuff" onClick={preventDefault(() => {})}>
              <Icon name="grid-four-up" />
            </a>
          </Tooltip>
        </TopBarItem>
        <TopBarItem>
          <Tooltip align="middle" tooltip={<p>Help</p>}>
            <a className="icon-link" href={'http://docs.kubra.io'}>
              <HelpIcon size="medium" />
            </a>
          </Tooltip>
        </TopBarItem>
        <TopBarItem isLast>
          <a href="/">Logout John Smith?</a>
        </TopBarItem>
      </TopBar>
    ),
    addDocs(TopBar),
  )
  .addWithInfo('empty topbar container', () => <TopBar />, addDocs(TopBar));

storiesOf('Icon', module).addWithInfo(
  'inline icon',
  () => (
    <div>
      <Icon name="plus" />
      <Icon name="map" />
      <Icon name="map-marker" />
      <Icon name="aperture" />
    </div>
  ),
  addDocs(Icon),
);

storiesOf('IconText', module)
  .addWithInfo(
    'default usage',
    () => (
      <div>
        <IconText label="Back to Home" name="home" />
      </div>
    ),
    addDocs(IconText),
  )
  .addWithInfo(
    'large icon',
    () => (
      <div>
        <IconText label="Back to Home" size="large" name="home" />
      </div>
    ),
    addDocs(IconText),
  )
  .addWithInfo(
    'small icon',
    () => (
      <div>
        <IconText label="Back to Home" size="small" name="home" />
      </div>
    ),
    addDocs(IconText),
  );

storiesOf('HelpIcon', module)
  .addWithInfo(
    'small help',
    () => (
      <div>
        <HelpIcon size="small" />
      </div>
    ),
    addDocs(HelpIcon),
  )
  .addWithInfo(
    'medium help',
    () => (
      <div>
        <HelpIcon size="medium" />
      </div>
    ),
    addDocs(HelpIcon),
  )
  .addWithInfo(
    'large help',
    () => (
      <div>
        <HelpIcon size="large" />
      </div>
    ),
    addDocs(HelpIcon),
  );

storiesOf('Breadcrumbs', module)
  .addWithInfo(
    'two links with react router',
    () => (
      <div>
        <Breadcrumbs links={breadcrumbsLinks.slice(0, 2)} withBack />
      </div>
    ),
    addDocs(Breadcrumbs),
  )
  .addWithInfo(
    'four links with hrefs',
    () => (
      <div>
        <Breadcrumbs links={breadcrumbsLinks} withBack useHrefs />
      </div>
    ),
    addDocs(Breadcrumbs),
  );

const PaginationWithState = withState('currentPage', 'onClick', 0)(
  ({ currentPage, onClick, totalPages }) => {
    action('twoWayValue')(currentPage);
    return <Pagination totalPages={totalPages} currentPage={currentPage} onClick={onClick} />;
  },
);

storiesOf('Pagination', module).addWithInfo(
  'with state',
  () => (
    <PaginationWithState
      totalPages={pagination.totalPages}
      currentPage={pagination.currentPage}
      onClick={paginationOnClick}
    />
  ),
  addDocs(Pagination),
);

const TabCloudWithState = withState('currentTab', 'onClick', 'general')(
  ({ currentTab, onClick }) => {
    action('twoWayValue')(currentTab);
    return (
      <TabCloud>
        <TabItem onClick={() => onClick('general')} isActive={currentTab === 'general'} label="General" icon="move" />
        <TabItem onClick={() => onClick('map')} isActive={currentTab === 'map'} label="Map" icon="map-marker" />
        <TabItem onClick={() => onClick('layers')} isActive={currentTab === 'layers'} label="Layers" icon="server" />
        <TabItem onClick={() => onClick('four')} isActive={currentTab === 'four'} label="Four" icon="screen-viewport" />
        <TabItem onClick={() => onClick('five')} isActive={currentTab === 'five'} label="Five" icon="target" />
        <TabItem onClick={() => onClick('six')} isActive={currentTab === 'six'} label="Six" icon="tags" />
      </TabCloud>
    );
  },
);

storiesOf('TabCloud', module).addWithInfo(
  'with state',
  () => (
    <TabCloudWithState
      currentTab={tabCloud.currentTab}
      onClick={tabOnClick}
    />
  ),
  addDocs(TabCloud),
);

/* Modal */
const ModalWithState = withState('isOpen', 'setIsOpen', false)(({ isOpen, setIsOpen }) => (
  <div>
    <Modal
      isOpen={isOpen}
      size="md"
      onBackgroundClick={() => {
        setIsOpen(!isOpen);
      }}
    >
      <div style={{ padding: '10px 20px' }}>
        <h1>Basic Modal</h1>
        <p>Hello World.</p>
        <div style={{ textAlign: 'right' }}>
          <ButtonSecondary label="Close" onClick={() => setIsOpen(!isOpen)} />
        </div>
      </div>
    </Modal>
    <div style={{ textAlign: 'center', marginTop: '300px' }}>
      <ButtonPrimary label="Open Modal" onClick={() => setIsOpen(!isOpen)} />
    </div>
  </div>
));

storiesOf('Modal', module).addWithInfo(
  'Default',
  `
    Basic modal, with onBackgroundClick to close.
  `,
  () => <ModalWithState />,
  addDocs(Modal),
);

const clickedElem = 'Delete Me';

let confirmCheat = true;

/* ConfirmDelete */
const ConfirmDeleteWithState = withState('isOpen', 'setIsOpen', false)(({ isOpen, setIsOpen, confirmType }) => (
  <div>
    <ConfirmDelete
      isOpen={isOpen}
      dataType="Button"
      clickedElem={clickedElem}
      onBackgroundClick={() => {
        setIsOpen(!isOpen);
      }}
      handleDelete={() => {
        setIsOpen(!isOpen);
        confirmCheat = false;
      }}
      confirmType={confirmType}
    />
    <div style={{ textAlign: 'center', marginTop: '300px' }}>
      {confirmCheat ?
        <ButtonTertiary
          label="Delete Me"
          icon="trash"
          onClick={() => setIsOpen(!isOpen)}
        /> :
        <div>
          <h3>Poof!</h3>
        </div>
      }
    </div>
  </div>
));

storiesOf('ConfirmDelete', module)
.addWithInfo(
  'With Input Field',
  `
    Basic ConfirmDelete with an input field.
  `,
  () => <ConfirmDeleteWithState confirmType="input" />,
  addDocs(ConfirmDeleteWithState),
)
.addWithInfo(
  'No Input',
  `
    Basic ConfirmDelete wintout an input field.
  `,
  () => <ConfirmDeleteWithState />,
  addDocs(ConfirmDeleteWithState),
);

const tableCols = [
  { name: 'First Name', path: 'firstName', canSort: true },
  { name: 'Last Name', path: 'lastName', canSort: true },
  { name: 'Position', path: 'position', canSort: true },
  { name: 'AVG', path: 'stats.avg', canSort: false },
];

const tableData = [
  {
    firstName: 'Jose',
    lastName: 'Alvarez',
    position: 'Pitcher',
    stats: { avg: '.500', obp: '.500' },
  },
  {
    firstName: 'Andrew',
    lastName: 'Bailey',
    position: 'Pitcher',
    stats: { avg: '.234', obp: '.222' },
  },
  { firstName: 'Buddy', lastName: 'Guy', position: null, stats: { avg: '.999', obp: '.1000' } },
  {
    firstName: 'Cam',
    lastName: 'Bedrosian',
    position: 'Pitcher',
    stats: { avg: '.123', obp: '.373' },
  },
  {
    firstName: 'Juan',
    lastName: 'Graterol',
    position: 'Catcher',
    stats: { avg: '.432', obp: '.454' },
  },
  {
    firstName: 'Kaleb',
    lastName: 'Cowart',
    position: 'Infield',
    stats: { avg: '.222', obp: '.555' },
  },
  { firstName: 'C.J.', lastName: 'Cron', position: 'Infield', stats: { avg: '.165', obp: '.212' } },
  {
    firstName: 'Yunel',
    lastName: 'Escobar',
    position: 'Infield',
    stats: { avg: '.165', obp: '.564' },
  },
  {
    firstName: 'Kole',
    lastName: 'Calhoun',
    position: 'Outfield',
    stats: { avg: '.198', obp: '.987' },
  },
  {
    firstName: 'Shane',
    lastName: 'Robinson',
    position: 'Outfield',
    stats: { avg: '.199', obp: '.123' },
  },
  {
    firstName: 'Mike',
    lastName: 'Trout',
    position: 'Outfield',
    stats: { avg: '.213', obp: '.765' },
  },
  {
    firstName: 'Don',
    lastName: 'Pistole',
    position: undefined,
    stats: { avg: '.000', obp: '.000' },
  },
];

/* Table */
storiesOf('Table', module)
  .addWithInfo(
    'with everything',
    `
      Table component, with pagination, selective sorting, inital sorting, and padded table rows.
    `,
    () => (
      <div style={{ margin: '100px 50px' }}>
        <Table
          columns={tableCols}
          data={tableData}
          recordsPerPage={5}
          initialSortBy={'lastName'}
          initialSortDirection={SORT_ASCENDING}
          initialPage={1}
          padTableRows
        />
      </div>
    ),
    addDocs(Table),
  )
  .addWithInfo(
    'without header',
    `
      Table with only data supplied.
    `,
    () => (
      <div style={{ margin: '100px 50px' }}>
        <Table data={tableData} />
      </div>
    ),
    addDocs(Table),
  )
  .addWithInfo(
    'with pagination',
    `
      Basic Table with pagination and sorting.
    `,
    () => (
      <div style={{ margin: '100px 50px' }}>
        <Table columns={tableCols} data={tableData} recordsPerPage={5} initialPage={1} />
      </div>
    ),
    addDocs(Table),
  );

/* Slider */

const SliderWithState = withState('sliderValue', 'onChange', 45)(
  ({ sliderValue, onChange, disabled }) => (
    <div style={{ padding: '50px 10px' }}>
      <h3 style={{ textAlign: 'center' }}>Slider Value: {sliderValue}</h3>
      <Slider
        min="0"
        max="100"
        step="5"
        value={sliderValue}
        onChange={onChange}
        disabled={disabled}
      />
    </div>
  ),
);

storiesOf('Slider', module).addWithInfo(
  'Basic Slider',
  `
      A Basic Slider using HTML input range.
    `,
  () => <SliderWithState />,
  addDocs(Slider),
);
storiesOf('Slider', module).addWithInfo(
  'Disabled Slider',
  `
      A Disabled Basic Slider using HTML input range.
    `,
  () => <SliderWithState disabled />,
  addDocs(Slider),
);

storiesOf('OrderTable', module).addWithInfo(
  'sample data',
  'Order Table logic render prop container that wraps table JSX and provides order form elements. Please visit the source to learn more.',
  () => (
    <div className="pad-x pad-y">
      <OrderTable
        items={[
          { id: 'First', info: 'Cool', order: 1 },
          { id: 'Second', info: 'beans', order: 2 },
          { id: 'Third', info: 'bro', order: 3 },
        ]}
        idPath={'id'}
        orderPath={'order'}
        onSubmit={action('newOrderData')}
      >
        {(updateOrder, handleSubmit, error) => (
          <div>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Info</th>
                  <th>Order</th>
                </tr>
              </thead>
              <TableBody>
                {(option, formValue, updateHandler) => (
                  <tr key={option.id}>
                    <td>{option.id}</td>
                    <td>{option.info}</td>
                    <td>
                      <TextField
                        name="order"
                        hintText=""
                        value={String(formValue)}
                        onChange={updateHandler}
                      />
                    </td>
                  </tr>
                )}
              </TableBody>
            </table>
            <div className="pad-y red">{error}</div>
            <ButtonSecondary
              label="Update Order"
              onClick={() => {
                updateOrder();
              }}
            />
            <ButtonPrimary
              label="Submit Order"
              onClick={() => {
                handleSubmit();
              }}
            />
          </div>
        )}
      </OrderTable>
    </div>
  ),
  addDocs(OrderTable),
);

storiesOf('Tooltip', module)
  .addWithInfo(
    'default usage',
    () => (
      <div style={{ width: '100%', paddingLeft: '5rem' }}>
        <Tooltip align="middle" tooltip={<p>Return to Tenant Selection</p>}>
          <HelpIcon size="large" />
        </Tooltip>
      </div>
    ),
    addDocs(Tooltip),
  )
  .addWithInfo(
    'with paragraph',
    () => (
      <div>
        <p>
          Subheader At atque autem delectus{' '}
          <Tooltip align="right" tooltip={<span>Link to Documentation</span>}>
            <a href="#test">right arrow</a>
          </Tooltip>{' '}
          dolores <Tooltip align="middle" tooltip={<span>Link to Documentation</span>}>
            <a href="#test">middle arrow</a>
          </Tooltip>{' '} earum et, eum eveniet <Tooltip align="left" tooltip={<span>Link to Documentation</span>}>
            <a href="#test">left arrow</a>
          </Tooltip>{' '}, inventore nesciunt numquam quaerat
          recusandae.{' '}
        </p>
      </div>
    ),
    addDocs(Tooltip),
  );

storiesOf('Stripe', module)
  .addWithInfo('default usage', () => (
    <div style={{ width: '80%', margin: '5% auto' }}>
      {[['bar-chart', 'Analytics'], ['basket', 'Purchase'], ['bell', 'Notifications'], ['book', 'Research & Development']].map(data => (
        <div style={{ paddingBottom: '0.5rem' }}>
          <Stripe icon={data[0]} content={data[1]} onClick={action('onClick')} id="stripe" />
        </div>
      ))}
    </div>
  ));
