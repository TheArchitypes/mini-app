import React, { Component } from 'react';
import autobind from 'class-autobind';
import PropTypes from 'prop-types';
import checkDisabled from '../../lib/checkDisabled';
import { mergeClassNames } from '../../lib/mergeClassNames';
import preventDefault from '../../lib/preventDefault';
import htmlProps from '../../lib/htmlProps';
import getIdWithSuffix from '../../lib/getIdWithSuffix';

export class CheckBox extends Component {
  constructor(props) {
    super(props);
    this.state = this.defaultState();
    autobind(this);
  }

  componentWillReceiveProps({ value, checked }) {
    const _value = value || value === false ? value : checked;
    if (_value === undefined) {
      return;
    }
    this.setState(() => ({ value: _value }));
  }

  onSelect(value) {
    this.setState(() => ({
      value,
    }));
  }

  defaultState() {
    return {
      value: this.props.value ||
      this.props.checked ||
      this.props.defaultValue ||
      this.props.defaultChecked || false,
    };
  }

  render() {
    const {
      name,
      className,
      onChange,
      label,
      disabled,
    } = this.props;

    const {
      onSelect,
    } = this;

    const _onChange = (value) => {
      if (value !== this.state.value) {
        onSelect(value);
        onChange(value);
      }
    };

    const classNames = `checkbox ${disabled ? 'disabled' : ''}`;
    const checkboxId = getIdWithSuffix(this.props, 'input');
    return (
      <div {...htmlProps(this.props)} className={mergeClassNames(classNames, className)}>
        <input
          readOnly
          type="checkbox"
          name={name}
          checked={this.state.value}
          id={checkboxId}
          disabled={disabled}
        />
        <a href="" onClick={preventDefault(checkDisabled(disabled, () => _onChange(!this.state.value)))} id={getIdWithSuffix(this.props, 'on-click-link')}>
          <label htmlFor={checkboxId} id={getIdWithSuffix(this.props, 'label')}>{label}</label>
        </a>
      </div>
    );
  }
}

CheckBox.propTypes = {
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  defaultValue: PropTypes.bool,
  defaultChecked: PropTypes.bool,
  className: PropTypes.string,
  checked: PropTypes.bool,
  value: PropTypes.bool,
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
};

CheckBox.defaultProps = {
  name: null,
  defaultChecked: undefined,
  defaultValue: undefined,
  onChange() {},
  value: undefined,
  checked: undefined,
  className: '',
  disabled: false,
};

export default {
  CheckBox,
};
