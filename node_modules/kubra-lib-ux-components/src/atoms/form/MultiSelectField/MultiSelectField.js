import React, { Component } from 'react';
import _ from 'lodash';
import autobind from 'class-autobind';
import PropTypes from 'prop-types';
import { mergeClassNames } from '../../../lib/mergeClassNames';
import getIdWithSuffix from '../../../lib/getIdWithSuffix';
import DropdownSearch from './DropdownSearch';
import DropdownMenu from './DropdownMenu';

function reduceSelectedArray(views) {
  return views.map(view => view.value);
}

export class MultiSelectField extends Component {
  constructor(props) {
    super(props);
    this.state = {
      showMenu: false,
      selectedArray: this.buildSelectArray(),
      highlightIndex: -1,
      searchBox: '',
    };
    autobind(this);
  }
  componentWillReceiveProps(nextProps) {
    this.setState(() => ({
      selectedArray: this.buildSelectArray(nextProps),
    }));
  }

  onSearchText(event) {
    const value = event.target.value;
    this.setState(() => ({ searchBox: value, showMenu: true }));
  }

  onSelectValue(selectValue, label) {
    if (_.includes(_.map(this.state.selectedArray, 'value'), selectValue)) {
      return;
    }
    this.setState(
      state => ({
        selectedArray: [
          ...state.selectedArray,
          {
            value: selectValue,
            label,
          },
        ],
        searchBox: '',
        highlightIndex: -1,
      }),
      () => {
        this.searchBox.focus();
        this.props.onChange(reduceSelectedArray(this.state.selectedArray));
      },
    );
  }

  onToggleMenu(showMenu) {
    if (showMenu) {
      this.searchBox.focus();
    } else {
      this.searchBox.blur();
    }
    this.setState(() => ({
      showMenu,
    }));
  }

  onCancel(menuItem) {
    this.setState(state =>
      ({
        selectedArray: state.selectedArray
          .filter(selected => selected.value !== menuItem.value),
      }),
      () => {
        this.props.onChange(reduceSelectedArray(this.state.selectedArray));
      },
    );
  }

  onHighlightSelect() {
    if (this.state.highlightIndex < 0) {
      return;
    }
    const menuItem = this.searchFilteredUnselectedChildren[this.state.highlightIndex];
    if (menuItem.props) {
      this.onSelectValue(menuItem.props.value, menuItem.props.label);
    }
  }

  onDeleteLastValue() {
    if (this.state.searchBox.length > 0) {
      return;
    }
    this.setState(state => ({
      selectedArray: state.selectedArray.slice(0, -1),
    }), () => {
      this.props.onChange(reduceSelectedArray(this.state.selectedArray));
    });
  }

  preventDisabled(callback) {
    if (!this.props.disabled) {
      return callback;
    }
    return () => {};
  }

  incrementIndex(value) {
    this.setState((state) => {
      const solution = state.highlightIndex + value;
      if (
        solution > this.searchFilteredUnselectedChildrenTotal - 1 ||
        solution < 0
      ) {
        return {};
      }
      return {
        highlightIndex: solution,
      };
    });
  }

  buildSelectArray(props = this.props) {
    const labels = _.reduce(
      props.children,
      (acc, option) => ({
        ...acc,
        [option.props.value]: option.props.label,
      }),
      {},
    );
    return props.value
      .map(value => ({
        value,
        label: labels[value],
      }));
  }

  buildCollections(searchBox, selectedArray, children) {
    this.selectedValueHash = _.keyBy(selectedArray, 'value');
    this.unselectedChildren = children
      .filter(element => !this.selectedValueHash[element.props.value]);
    const searchRegexp = new RegExp(_.escapeRegExp(searchBox), 'i');
    this.searchFilteredUnselectedChildren = this.unselectedChildren
      .filter(element => _.isArray(element.props.label.match(searchRegexp)));
    this.searchFilteredUnselectedChildrenTotal = this.searchFilteredUnselectedChildren.length;
  }

  render() {
    const { name, children, className, defaultValue, disabled } = this.props;
    const selectLabel = this.props.label;
    const { showMenu, selectValue, selectedArray } = this.state;
    const { onToggleMenu } = this;

    this.buildCollections(this.state.searchBox, this.state.selectedArray, children);

    // Always ensure hard binding input value has a value thats not undefined
    const hiddenValue = selectValue || defaultValue || '';

    // Render a readonly input to record the value for HTML5 form support
    return (
      <div
        className={mergeClassNames(`multi-select ${disabled ? 'disabled' : ''}`, className)}
        id={getIdWithSuffix(this.props, 'container')}
      >
        {selectLabel && <label htmlFor={name}>{selectLabel}</label>}
        <div className="content">
          <input
            id={getIdWithSuffix(this.props, 'input-value')}
            type="hidden"
            name={name}
            value={hiddenValue}
            disabled={disabled}
          />
          <button
            type="button"
            onClick={() => onToggleMenu(!showMenu)}
            data-glyph="x"
            className={showMenu ? 'expand close' : 'expand open'}
            id={getIdWithSuffix(this.props, 'expand-toggle')}
          />
          <div
            onClick={() => onToggleMenu(!showMenu)}
            role="button"
            className={
              'select-container'
            }
            tabIndex="0"
            id={getIdWithSuffix(this.props, 'input-on-click')}
          >
            <div className="search-box">
              <DropdownSearch
                refCallback={(ref) => {
                  this.searchBox = ref;
                }}
                placeholder={this.props.placeholder}
                className="search-box"
                value={this.state.searchBox}
                onChange={this.onSearchText}
                onFocus={() => this.onToggleMenu(true)}
                onBlur={() => { }}
                onClick={this.preventDisabled(() => this.onToggleMenu(true))}
                onUpArrow={() => this.incrementIndex(-1)}
                onDownArrow={() => this.incrementIndex(1)}
                onEnter={this.preventDisabled(this.onHighlightSelect)}
                onDelete={() => this.onDeleteLastValue()}
                onEscape={() => this.onToggleMenu(false)}
                id="dropdown-search"
              />
            </div>
            {selectedArray.length > 0 &&
            <div className="menu-items">
              {selectedArray.map(selected => (
                <span
                  role="presentation"
                  onClick={event => event.stopPropagation()}
                  key={selected.value}
                  className="item"
                  id={`menu-item-${_.kebabCase(selected.label)}`}
                >
                  {selected.label}
                  <button
                    type="button"
                    className="cancel icon iconic"
                    data-glyph="x"
                    id={`cancel-menu-item-${_.kebabCase(_.camelCase(selected.label))}`}
                    onClick={(event) => {
                      event.stopPropagation();
                      this.preventDisabled(() => this.onCancel(selected))();
                    }}
                  />
                </span>
              ))}
            </div>
            }
          </div>
          {showMenu && <DropdownMenu
            menuItems={this.searchFilteredUnselectedChildren}
            onSelectedValue={this.preventDisabled(this.onSelectValue)}
            highlightIndex={this.state.highlightIndex}
            searchText={this.state.searchBox}
          />}
        </div>
      </div>
    );
  }
}

MultiSelectField.propTypes = {
  name: PropTypes.string,
  children: PropTypes.node.isRequired,
  onChange: PropTypes.func,
  placeholder: PropTypes.string,
  // Eslint can't detect default arguments for this.props.value
  // eslint-disable-next-line
  value: PropTypes.arrayOf(PropTypes.string),
  label: PropTypes.string,
  className: PropTypes.string,
  defaultValue: PropTypes.string,
  disabled: PropTypes.bool,
};

MultiSelectField.defaultProps = {
  onChange() {},
  placeholder: 'Search...',
  value: [],
  name: '',
  label: null,
  className: '',
  defaultValue: '',
  disabled: false,
};

export default {
  MultiSelectField,
};
