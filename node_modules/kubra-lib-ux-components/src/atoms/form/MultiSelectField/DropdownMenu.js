import React, { Component } from 'react';
import PropTypes from 'prop-types';
import autobind from 'class-autobind';

export class DropdownMenu extends Component {
  constructor(props) {
    super(props);
    autobind(this);
  }
  componentDidUpdate() {
    this.scrollSelectedItemIntoView();
  }
  scrollSelectedItemIntoView() {
    if (!this.list) return;
    const menu = this.list;
    if (!menu) return;
    const item = menu.querySelector('li.highlight');
    if (!item) return;
    const isOutOfUpperView = item.offsetTop < menu.scrollTop;
    const isOutOfLowerView =
      (item.offsetTop + item.clientHeight) > menu.scrollTop + menu.clientHeight;
    if (isOutOfUpperView) {
      menu.scrollTop = item.offsetTop;
    } else if (isOutOfLowerView) {
      menu.scrollTop = (item.offsetTop + item.clientHeight) - menu.clientHeight;
    }
  }
  render() {
    return (
      <ul ref={(ref) => { this.list = ref; }}>
        {this.props.menuItems
          .map((element, elementIndex) => {
            const { value, label, id: elementId } = element.props;
            const childClassName = elementIndex === this.props.menuItems.length - 1 ? 'last-child' : '';
            const shouldHighlight = this.props.highlightIndex === elementIndex ? 'highlight' : '';
            return React.cloneElement(element, {
              key: `option-${elementIndex}`,
              onSelectValue: () => {
                this.props.onSelectedValue(value, label);
              },
              id: elementId,
              className: `${childClassName} ${shouldHighlight}`,
            });
          })
        }
        {this.props.menuItems.length === 0 && <li>No More Results.</li>}
      </ul>
    );
  }
}

{
  const { func, arrayOf, node, number } = PropTypes;
  DropdownMenu.propTypes = {
    menuItems: arrayOf(node).isRequired,
    onSelectedValue: func.isRequired,
    highlightIndex: number.isRequired,
  };
}

DropdownMenu.defaultProps = {
  searchText: '',
};

export default DropdownMenu;
