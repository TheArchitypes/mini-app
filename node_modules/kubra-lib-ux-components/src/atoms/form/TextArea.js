import React, { Component } from 'react';
import autobind from 'class-autobind';
import PropTypes from 'prop-types';
import { mergeClassNames } from '../../lib/mergeClassNames';
import htmlProps from '../../lib/htmlProps';
import twoWay from '../../lib/twoWay';
import getIdWithSuffix from '../../lib/getIdWithSuffix';

export class TextArea extends Component {
  constructor(props) {
    super(props);
    this.state = {
      hasFocus: false,
      lastValue: props.value || '',
      indexForAutocomplete: '',
      autocompleteValue: '',
      autocompleteItemsToShow: [],
      showAutocomplete: false,
      onHover: null,
    };
    autobind(this);
  }

  onFocus() {
    this.setState({
      hasFocus: true,
    });
  }

  onBlur() {
    if (this.state.onHover === null) {
      this.setState({
        hasFocus: false,
        onHover: null,
      });
    }
  }

  setCurrentOnHover(index, numberOfItems) {
    if (numberOfItems.length > 0) {
      if (index === null) {
        this.setState({
          onHover: 0,
        });
      } else if (index <= -1) {
        this.setState({
          onHover: numberOfItems.length - 1,
        });
      } else {
        this.setState({
          onHover: index % numberOfItems.length,
        });
      }
    }
  }

  handleChange(e) {
    if (this.props.onChange) {
      this.props.onChange(e.target.value);
    }
  }

  render() {
    const {
      name,
      label,
      hintText,
      defaultValue,
      disabled,
      className,
      onChange,
      readOnly,
      resize,
      rows,
      value,
      maxLength,
      wrap,
    } = this.props;

    const inputId = getIdWithSuffix(this.props, 'input');
    const inputClassName = mergeClassNames(
        `${resize ? 'resizeable-text-area' : 'no-resize-text-area'}`,
        'text-area',
      );
    const _label = (maxLength) ? `${label} - Max ${maxLength} Characters` : label;

    return (
      <div {...htmlProps(this.props)} className={mergeClassNames('text-area', className)}>
        {label && <label htmlFor={name}>{_label}</label>}
        <textarea
          {...twoWay({ onChange, value })}
          onChange={this.handleChange}
          className={inputClassName}
          name={name}
          disabled={disabled}
          defaultValue={defaultValue}
          placeholder={hintText}
          rows={rows}
          id={inputId}
          maxLength={maxLength}
          readOnly={readOnly}
          wrap={wrap}
        />
      </div>
    );
  }
}

{
  const { string, oneOfType, bool, number, func } = PropTypes;
  TextArea.propTypes = {
    className: string,
    defaultValue: oneOfType([string, number]),
    disabled: bool,
    hintText: string.isRequired,
    label: string,
    maxLength: number,
    name: string.isRequired,
    onChange: func,
    readOnly: bool,
    resize: bool,
    rows: number,
    value: string,
    wrap: string,
  };

  TextArea.defaultProps = {
    defaultValue: undefined,
    disabled: false,
    label: null,
    className: '',
    value: undefined,
    onChange: undefined,
    readOnly: false,
    resize: false,
    rows: 1,
    maxLength: undefined,
    wrap: '',
  };
}

export default {
  TextArea,
};
