import React, { Component } from 'react';
import autobind from 'class-autobind';
import PropTypes from 'prop-types';
import { mergeClassNames } from '../../lib/mergeClassNames';
import getIdWithSuffix from '../../lib/getIdWithSuffix';

function moveCursorToEnd(element) {
  const newElement = element;
  if (typeof element.selectionStart === 'number') {
    newElement.selectionStart = element.selectionEnd;
    newElement.selectionEnd = element.value.length;
  } else if (typeof element.createTextRange !== 'undefined') {
    element.focus();
    const range = element.createTextRange();
    range.collapse(false);
    range.select();
  }
}

function setFocus(input) {
  if (input && input.name === 'select-field-custom') {
    input.focus();
    moveCursorToEnd(input);
  }
}

export class SelectCustomFieldInput extends Component {
  constructor(props) {
    super(props);
    this.state = {
      showMenu: false,
      selectValue: this.props.value || this.props.defaultValue,
      showInput: false,
      customValue: '',
    };
    autobind(this);
  }

  // if the props update, update the selectValue on local state
  componentWillReceiveProps(nextProps) {
    const { selectValue } = this.state;
    if (selectValue !== 'custom') {
      this.setState({
        selectValue: nextProps.value || nextProps.defaultValue,
        showInput: false,
      });
    }
  }

  onSelectValue(selectValue) {
    this.setState({
      selectValue,
      showInput: selectValue === 'custom',
    });
  }

  onToggleMenu(showMenu) {
    if (!this.props.disabled) {
      this.setState(() => ({
        showMenu,
        showInput: false,
      }));
    }
  }

  onChangeCustom(value) {
    const { onChange } = this.props;
    this.setState({
      customValue: value,
    }, () => {
      onChange(value);
    });
  }

  onApply() {
    const { customValue } = this.state;
    this.setState({
      selectValue: customValue,
      showInput: false,
      showMenu: false,
    });
  }

  onClear() {
    this.setState({
      customValue: '',
    });
  }

  render() {
    const {
      name,
      children,
      onChange,
      className,
      defaultValue,
      disabled,
      label: selectLabel,
    } = this.props;

    const {
      showMenu,
      selectValue,
      showInput,
      customValue,
    } = this.state;

    const {
      onToggleMenu,
      onSelectValue,
      onChangeCustom,
      onApply,
      onClear,
    } = this;

    // Need to update internal state to update input
    // and need to update parent component if two-way-databinding is set
    const _onSelectValue = (value) => {
      onChange(value);
      onSelectValue(value);
      onToggleMenu(false);
    };

    let currentLabel = 'Please select one...';
    if (selectValue === customValue) {
      currentLabel = selectValue;
    }

    // iterate through all menuitems and pass in _onSelectValue to run on click of menu item
    // Find the currently selected menu item and pull the label value for currentLabel
    const _children = (
      <ul>
        {children.map(
          (element, elementIndex) => {
            const { value, label, id: elementId } = element.props;
            const childClassName = elementIndex === children.length - 1 ? 'last-child' : '';

            if (value === selectValue) {
              currentLabel = label;
            }

            return React.cloneElement(element, {
              key: `option-${elementIndex}`,
              onSelectValue: _onSelectValue,
              id: elementId,
              className: childClassName,
            });
          },
        )}
        {!showInput &&
          <a onClick={() => onSelectValue('custom')} href="#menuitem">
            <li className="option">
              CUSTOM{customValue.length > 0 &&
                `: ${customValue}`
              }
            </li>
          </a>
        }
        {showInput &&
          <a href="#menuitem">
            <li className={mergeClassNames('option', 'custom-input')}>
              <div className="flex-grid">
                <div className="row">
                  <div className="col last custom-label">
                    <div>CUSTOM:</div>
                  </div>
                  <div className="col last">
                    <input
                      type="text"
                      name="select-field-custom"
                      id="select-field-custom"
                      ref={input => setFocus(input)}
                      value={customValue}
                      onChange={event => onChangeCustom(event.target.value)}
                    />
                  </div>
                  <div className="col last">
                    <div className="row custom-buttons">
                      <div className="col last">
                        <a role="presentation" onClick={() => onApply()}>Apply</a>
                      </div>
                      <div className="col last pipe">
                        |
                      </div>
                      <div className="col last custom-select-clear-btn">
                        <a role="presentation" onClick={() => onClear()}>Clear</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          </a>
        }
      </ul>
    );

    // Always ensure hard binding input value has a value thats not undefined
    const hiddenValue = selectValue || defaultValue || '';

    // Render a readonly input to record the value for HTML5 form support

    return (
      <div className={mergeClassNames(`select ${disabled ? 'disabled' : ''}`, className)} id={getIdWithSuffix(this.props, 'container')}>
        {selectLabel && <label htmlFor={name}>{selectLabel}</label>}
        <div className="select-wrapper">
          <input id={getIdWithSuffix(this.props, 'input-value')} type="hidden" name={name} value={hiddenValue} disabled={disabled} />
          <div className={showMenu ? 'up-caret' : 'down-caret'} role="presentation" onClick={() => onToggleMenu(!showMenu)} />
          <input
            type="text"
            readOnly
            value={currentLabel}
            onClick={() => onToggleMenu(!showMenu)}
            id={getIdWithSuffix(this.props, 'input-on-click')}
          />
          {showMenu && _children}
        </div>
      </div>
    );
  }
}

SelectCustomFieldInput.propTypes = {
  name: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  onChange: PropTypes.func,
  value: PropTypes.string,
  label: PropTypes.string,
  className: PropTypes.string,
  defaultValue: PropTypes.string,
  disabled: PropTypes.bool,
};

SelectCustomFieldInput.defaultProps = {
  onChange() {},
  value: '',
  label: null,
  className: '',
  defaultValue: '',
  disabled: false,
};

export default {
  SelectCustomFieldInput,
};
