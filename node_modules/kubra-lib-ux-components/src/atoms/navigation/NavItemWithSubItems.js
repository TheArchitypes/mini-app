import React, { Component } from 'react';
import { Link } from 'react-router';
import PropTypes from 'prop-types';
import autobind from 'class-autobind';
import { mergeClassNames } from '../../lib/mergeClassNames';
import htmlProps from '../../lib/htmlProps';
import { Icon } from '../icons';
import getIdWithSuffix from '../../lib/getIdWithSuffix';

export class NavItemWithSubItems extends Component {
  constructor(props) {
    super(props);
    this.state = {
      navItemIsActive: false,
    };
    autobind(this);
  }

  toggleNavItemIsActive() {
    this.setState({
      navItemIsActive: !this.state.navItemIsActive,
    });
  }

  render() {
    const { label, disabled, className, icon, subItems, overrideLinkClass } = this.props;
    const { navItemIsActive } = this.state;

    return (
      <div
        className={mergeClassNames('nav-item', className)}
        {...htmlProps(this.props)}
        disabled={disabled}
      >
        <li
          id={getIdWithSuffix(this.props, 'li')}
          onClick={this.toggleNavItemIsActive}
          role="menuitem"
        >
          <Icon className={`${icon} small`} name={icon} />
          <span className="label">{label}</span>
        </li>
        <NavSubItemContainer
          items={subItems}
          isOpen={navItemIsActive}
          id={getIdWithSuffix(this.props, 'subitems')}
          overrideLinkClass={overrideLinkClass}
        />
      </div>
    );
  }
}

NavItemWithSubItems.propTypes = {
  label: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
  className: PropTypes.string,
  icon: PropTypes.string,
  subItems: PropTypes.arrayOf(PropTypes.shape({})),
  overrideLinkClass: PropTypes.func,
};

NavItemWithSubItems.defaultProps = {
  disabled: false,
  onSelectValue() {},
  className: '',
  activeClassName: '',
  icon: '',
  subItems: [],
  overrideLinkClass: null,
};

export function NavSubItemContainer(props) {
  const { className, items, isOpen, overrideLinkClass } = props;
  const lastIndex = items.length - 1;
  const maxHeightOnOpen = (items.length * 35) + 30;

  return (
    <div
      className={mergeClassNames(`nav-sub-item-container ${isOpen ? 'is-open' : ''}`, className)}
      style={{ maxHeight: `${isOpen ? maxHeightOnOpen : 0}px` }}
      {...htmlProps(props)}
    >
      <div className="sub-items-icons">
        {items.map((item, index) => (
          <li className={`sub-item-icon ${index === lastIndex ? 'last' : ''} ${index === 0 ? 'first' : ''}`} key={index}>
            <div className="sub-item-line-horizontal" />
          </li>
        ))}
      </div>
      <div className="sub-items-list">
        {items.map((item, index) => (
          <NavSubItem
            key={index}
            label={item.label}
            linkTo={item.linkTo}
            icon={item.icon}
            index={index}
            lastItem={index === lastIndex}
            id={getIdWithSuffix(props, index)}
            overrideLinkClass={overrideLinkClass}
          />
        ))}
      </div>
    </div>
  );
}

NavSubItemContainer.propTypes = {
  className: PropTypes.string,
  items: PropTypes.arrayOf(PropTypes.shape({})),
  isOpen: PropTypes.bool.isRequired,
  overrideLinkClass: PropTypes.func,
};

NavSubItemContainer.defaultProps = {
  className: '',
  items: [],
  overrideLinkClass: null,
};

export function NavSubItem(props) {
  const {
    linkTo,
    label,
    disabled,
    className,
    icon,
    activeClassName,
    lastItem,
    overrideLinkClass,
  } = props;

  // If no overrideLinkClass, use Link.
  const OverrideLink = overrideLinkClass || Link;
  const linkProps = (overrideLinkClass) ? {
    // Props for Router 4 Link
    activeclassname: mergeClassNames('active', activeClassName),
  } : {
    // Props for Router 3 Link
    activeClassName: mergeClassNames('active', activeClassName),
  };

  return (
    <OverrideLink
      className={mergeClassNames(`nav-sub-item ${lastItem ? 'last' : ''}`, className)}
      {...htmlProps(props)}
      to={linkTo}
      {...linkProps}
      disabled={disabled}
    >
      <li id={getIdWithSuffix(props, 'li')}>
        <Icon className={`${icon} small`} name={icon} />
        <span className="label">{label}</span>
      </li>
    </OverrideLink>
  );
}

NavSubItem.propTypes = {
  linkTo: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
  className: PropTypes.string,
  activeClassName: PropTypes.string,
  icon: PropTypes.string,
  lastItem: PropTypes.bool,
  overrideLinkClass: PropTypes.func,
};

NavSubItem.defaultProps = {
  disabled: false,
  onSelectValue() {},
  className: '',
  activeClassName: '',
  icon: 'default',
  lastItem: false,
  overrideLinkClass: null,
};
