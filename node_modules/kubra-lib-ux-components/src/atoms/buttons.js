import React from 'react';
import _ from 'lodash';
import PropTypes from 'prop-types';
import preventDefault from '../lib/preventDefault';
import checkDisabled from '../lib/checkDisabled';
import { mergeClassNames } from '../lib/mergeClassNames';
import htmlProps from '../lib/htmlProps';
import { Icon } from './icons';
import { ToggleButton as _ToggleButton } from './button/ToggleButton';


function ButtonFactory(id) {
  function Button(props) {
    const { label, useButtonElement, onClick, className, icon, disabled } = props;
    const buttonContent = (
      <span>
        {icon && <span className="icon iconic" data-glyph={icon} />}
        <span className="label">{label}</span>
      </span>
    );
    if (useButtonElement) {
      return (<button
        {...htmlProps(props)}
        onClick={checkDisabled(disabled, onClick)}
        className={mergeClassNames(`button ${id} ${icon && 'button-icon'} ${disabled && 'disabled'}`, className)}
      >
        {buttonContent}
      </button>);
    }

    return (
      <a
        {...htmlProps(props)}
        href={`#${id}`}
        onClick={preventDefault(checkDisabled(disabled, onClick))}
        className={mergeClassNames(`button ${id} ${icon && 'button-icon'} ${disabled && 'disabled'}`, className)}
      >
        {buttonContent}
      </a>
    );
  }

  Button.displayName = _.startCase(id).replace(/\s/, '');

  Button.propTypes = {
    label: PropTypes.string.isRequired,
    icon: PropTypes.string,
    useButtonElement: PropTypes.bool,
    onClick: PropTypes.func,
    className: PropTypes.string,
    disabled: PropTypes.bool,
  };

  Button.defaultProps = {
    onClick() {},
    useButtonElement: false,
    className: '',
    icon: undefined,
    disabled: false,
  };

  return Button;
}

export const RaisedButton = ButtonFactory('button-primary');
export const FlatButton = ButtonFactory('button-flat');
export const ButtonPrimary = ButtonFactory('button-primary');
export const ButtonSecondary = ButtonFactory('button-secondary');
export const ButtonTertiary = ButtonFactory('button-tertiary');
export const ToggleButton = _ToggleButton;


export function IconButton(props) {
  const { useButtonElement, onClick, className, icon, hasCircle, isInline, disabled } = props;
  const circleClass = hasCircle ? 'circle' : '';
  const inlineClass = isInline ? 'inline' : '';
  const classNames = `button icon-button ${icon} ${circleClass} ${inlineClass} ${disabled && 'disabled'}`;

  if (useButtonElement) {
    return (<button
      {...htmlProps(props)}
      onClick={checkDisabled(disabled, onClick)}
      className={mergeClassNames(classNames, className)}
    >
      <Icon name={icon} />
    </button>);
  }

  return (
    <a
      {...htmlProps(props)}
      href={'#icon-button'}
      onClick={preventDefault(checkDisabled(disabled, onClick))}
      className={mergeClassNames(classNames, className)}
    >
      <Icon name={icon} />
    </a>
  );
}

IconButton.propTypes = {
  useButtonElement: PropTypes.bool,
  onClick: PropTypes.func,
  className: PropTypes.string,
  icon: PropTypes.string.isRequired,
  hasCircle: PropTypes.bool,
  isInline: PropTypes.bool,
  disabled: PropTypes.bool,
};

IconButton.defaultProps = {
  onClick() {},
  useButtonElement: false,
  className: '',
  hasCircle: false,
  isInline: false,
  disabled: false,
};

export default {
  RaisedButton,
  FlatButton,
  ButtonPrimary,
  ButtonSecondary,
  ButtonTertiary,
  IconButton,
  ToggleButton,
};
