import React, { Component } from 'react';
import autobind from 'class-autobind';
import PropTypes from 'prop-types';
import _ from 'lodash';
import { mergeClassNames } from '../lib/mergeClassNames';
import htmlProps from '../lib/htmlProps';
import twoWay from '../lib/twoWay';
import { CheckBox as _CheckBox } from './form/CheckBox';
import { MultiSelectField as _MultiSelectField } from './form/MultiSelectField';
import { SelectCustomFieldInput as _SelectCustomFieldInput } from './form/SelectCustomFieldInput';
import { AccordionField as _AccordionField } from './form/AccordionField';
import { RadioButton as _RadioButton, RadioButtonGroup as _RadioButtonGroup } from './form/RadioButtonGroup';
import { TextArea as _TextArea } from './form/TextArea';
import { TextField as _TextField } from './form/TextField';
import getIdWithSuffix from '../lib/getIdWithSuffix';

export const CheckBox = _CheckBox;
export const MultiSelectField = _MultiSelectField;
export const SelectCustomFieldInput = _SelectCustomFieldInput;
export const AccordionField = _AccordionField;
export const RadioButton = _RadioButton;
export const RadioButtonGroup = _RadioButtonGroup;
export const TextField = _TextField;
export const TextArea = _TextArea;


export function Slider(props) {
  const {
    min,
    max,
    step,
    onChange,
    value,
    className,
    disabled,
    id,
  } = props;

  return (
    <input
      type="range"
      disabled={disabled}
      min={min}
      max={max}
      step={step}
      {...twoWay({ onChange, value })}
      className={mergeClassNames(`kubra-range ${disabled ? 'disabled' : null}`, className)}
      id={`${id}-form-slider`}
    />
  );
}

Slider.propTypes = {
  min: PropTypes.number,
  max: PropTypes.number,
  step: PropTypes.number,
  value: PropTypes.string,
  onChange: PropTypes.func,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  id: PropTypes.string.isRequired,
};

Slider.defaultProps = {
  min: 0,
  max: 1,
  step: 1,
  value: undefined,
  onChange: undefined,
  className: '',
  disabled: false,
};

export class SelectField extends Component {
  constructor(props) {
    super(props);
    this.state = {
      showMenu: false,
      selectValue: this.props.value || this.props.defaultValue,
    };
    autobind(this);
  }

  // if the props update, update the selectValue on local state
  componentWillReceiveProps(nextProps) {
    this.setState({ selectValue: nextProps.value || nextProps.defaultValue });
  }

  onSelectValue(selectValue) {
    this.setState(() => ({
      selectValue,
    }));
  }

  onToggleMenu(showMenu) {
    if (!this.props.disabled) {
      this.setState(() => ({
        showMenu,
      }));
    }
  }

  render() {
    const {
      name,
      children,
      onChange,
      className,
      defaultValue,
      disabled,
    } = this.props;

    const {
      showMenu,
      selectValue,
    } = this.state;

    const {
      onToggleMenu,
      onSelectValue,
    } = this;

    const selectLabel = this.props.label;
    // Need to update internal state to update input
    // and need to update parent component if two-way-databinding is set
    const _onSelectValue = (value) => {
      if (!disabled) {
        onChange(value);
        onSelectValue(value);
        onToggleMenu(false);
      }
    };

    let currentLabel = 'Please select one...';

    // iterate through all menuitems and pass in _onSelectValue to run on click of menu item
    // Find the currently selected menu item and pull the label value for currentLabel
    const _children = (
      <ul>
        {children.map(
          (element, elementIndex) => {
            const { value, label, id: elementId } = element.props;
            const childClassName = elementIndex === children.length - 1 ? 'last-child' : '';

            if (value === selectValue) {
              currentLabel = label;
            }

            return React.cloneElement(element, {
              key: `option-${elementIndex}`,
              onSelectValue: _onSelectValue,
              id: elementId,
              className: childClassName,
            });
          },
        )}
      </ul>
    );

    // Always ensure hard binding input value has a value thats not undefined
    const hiddenValue = selectValue || defaultValue || '';

    // Render a readonly input to record the value for HTML5 form support

    return (
      <div className={mergeClassNames(`select ${disabled ? 'disabled' : ''}`, className)} id={getIdWithSuffix(this.props, 'container')}>
        {selectLabel && <label htmlFor={name}>{selectLabel}</label>}
        <div className="select-wrapper">
          <input id={getIdWithSuffix(this.props, 'input-value')} type="hidden" name={name} value={hiddenValue} disabled={disabled} />
          <div className={showMenu ? 'up-caret' : 'down-caret'} role="presentation" onClick={() => onToggleMenu(!showMenu)} />
          <input
            type="text"
            readOnly
            value={currentLabel}
            onClick={() => onToggleMenu(!showMenu)}
            id={getIdWithSuffix(this.props, 'input-on-click')}
          />
          {showMenu && _children}
        </div>
      </div>
    );
  }
}

SelectField.propTypes = {
  name: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  onChange: PropTypes.func,
  value: PropTypes.string,
  label: PropTypes.string,
  className: PropTypes.string,
  defaultValue: PropTypes.string,
  disabled: PropTypes.bool,
};

SelectField.defaultProps = {
  onChange() {},
  value: '',
  label: null,
  className: '',
  defaultValue: '',
  disabled: false,
};

export function MenuItem(props) {
  const { value, label, disabled, className, onSelectValue, id } = props;
  const onClick = (event) => {
    event.preventDefault();
    if (!disabled) {
      onSelectValue(value);
    }
  };
  return (
    <a {...htmlProps(props)} onClick={onClick} href="#menuitem" id={`${id}-menu-item-select-${_.kebabCase(_.camelCase(label))}`}><li className={mergeClassNames('option', className)} id={`${id}-menu-item-${_.kebabCase(_.camelCase(label))}`}>{label}</li></a>
  );
}

MenuItem.propTypes = {
  value: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  onSelectValue: PropTypes.func,
  disabled: PropTypes.bool,
  className: PropTypes.string,
  id: PropTypes.string.isRequired,
};

MenuItem.defaultProps = {
  disabled: false,
  onSelectValue() {},
  className: '',
};

export default {
  TextField,
  TextArea,
  RadioButton,
  RadioButtonGroup,
  CheckBox,
  SelectField,
  MenuItem,
  Slider,
};
