import React from 'react';
import _ from 'lodash';
import autobind from 'class-autobind';
import { mount } from 'enzyme';
import sleep from '../../../lib/sleep';
import { ButtonSecondary, ButtonPrimary } from '../../../atoms/buttons';
import { TextField } from '../../../atoms/form';
import preventDefault from '../../../lib/preventDefault';
import TableBody from '../TableBody';
import OrderTable from '../OrderTable';

describe('OrderTable', () => {
  let props;
  let iterator;
  let FakeContainer;
  beforeEach(() => {
    jest.resetAllMocks();
    console.error = jest.fn((message) => {
      throw new Error(message);
    });
    props = {
      onSubmit: jest.fn(),
      items: [{ id: 'First', order: 1 }, { id: 'Second', order: 2 }, { id: 'Third', order: 3 }],
      idPath: 'id',
      orderPath: 'order',
    };
    iterator = (option, formValue, updateHandler) => (
      <tr key={option.id}>
        <td>{option.id}</td>
        <td>
          <TextField name="order" hintText="" value={String(formValue)} onChange={updateHandler} />
        </td>
      </tr>
    );

    FakeContainer = class FakeContainer extends React.Component {
      constructor(props) {
        super(props);
        autobind(this);
      }
      render() {
        const { items, onSubmit, idPath, orderPath } = this.props;
        return (
          <div>
            <OrderTable items={items} idPath={idPath} orderPath={orderPath} onSubmit={onSubmit}>
              {(updateOrder, handleSubmit, error) => (
                <div>
                  <table>
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Order</th>
                      </tr>
                    </thead>
                    <TableBody>{iterator}</TableBody>
                  </table>
                  <div data-test="validation" className="pad-y red">
                    {error}
                  </div>
                  <ButtonSecondary
                    label="Save Order"
                    onClick={preventDefault(() => {
                      updateOrder(() => handleSubmit());
                    })}
                  />
                </div>
              )}
            </OrderTable>
          </div>
        );
      }
    };
  });
  it('renders without crashing sanity check', () => {
    const wrapper = mount(<FakeContainer {...props} />);
    wrapper.mount();
    expect(wrapper.find('OrderTable')).toHaveLength(1);
  });
  it('renders without empty array of items', () => {
    props.items = [];
    const wrapper = mount(<FakeContainer {...props} />);
    wrapper.mount();
    expect(
      wrapper
        .find('TableBody')
        .find('tbody')
        .children(),
    ).toHaveLength(0);
  });
  describe('data types', () => {
    describe('array', () => {
      beforeEach(() => {
        iterator = (option, formValue, updateHandler) => (
          <tr key={option}>
            <td>{option}</td>
            <td>
              <TextField
                name="order"
                hintText=""
                value={String(formValue)}
                onChange={updateHandler}
              />
            </td>
          </tr>
        );
        props.idPath = undefined;
        props.orderPath = undefined;
        props.items = ['First', 'Second', 'Third'];
      });
      it('should accept an array', () => {
        const wrapper = mount(<FakeContainer {...props} />);
        wrapper.mount();
        expect(
          wrapper
            .find('TableBody')
            .find('tbody')
            .children(),
        ).toHaveLength(3);
      });
      it('should swap first and third', () => {
        const wrapper = mount(<FakeContainer {...props} />);
        wrapper.mount();
        const items = wrapper.find('input[name="order"]');
        items.first().simulate('change', {
          target: {
            value: '3',
          },
        });
        items.last().simulate('change', {
          target: {
            value: '1',
          },
        });
        return sleep(3)
          .then(() => {
            wrapper
              .find('ButtonSecondary')
              .find('a')
              .simulate('click');
            return sleep(3);
          })
          .then(() => {
            expect(props.onSubmit).toHaveBeenCalledWith(['Third', 'Second', 'First']);
          });
      });
    });
    describe('object', () => {
      it('should accept an object with id and order props', () => {
        props.items = [
          { id: 'First', order: 1 },
          { id: 'Second', order: 2 },
          { id: 'Third', order: 3 },
        ];
        const wrapper = mount(<FakeContainer {...props} />);
        wrapper.mount();
        expect(
          wrapper
            .find('TableBody')
            .find('tbody')
            .children(),
        ).toHaveLength(3);
      });
      it('should swap first and last', () => {
        const wrapper = mount(<FakeContainer {...props} />);
        wrapper.mount();
        const items = wrapper.find('input[name="order"]');
        items.first().simulate('change', {
          target: {
            value: '3',
          },
        });
        items.last().simulate('change', {
          target: {
            value: '1',
          },
        });
        return sleep(3)
          .then(() => {
            wrapper
              .find('ButtonSecondary')
              .find('a')
              .simulate('click');
            return sleep(3);
          })
          .then(() => {
            expect(props.onSubmit).toHaveBeenCalledWith([
              { id: 'Third', order: 1 },
              { id: 'Second', order: 2 },
              { id: 'First', order: 3 },
            ]);
          });
      });
    });
  });
  describe('validation', () => {
    it('should render validation message for invalid order', () => {
      const wrapper = mount(<FakeContainer {...props} />);
      wrapper.mount();
      const items = wrapper.find('input[name="order"]');
      items.first().simulate('change', {
        target: {
          value: '4',
        },
      });
      items.last().simulate('change', {
        target: {
          value: '0',
        },
      });
      return sleep(3)
        .then(() => {
          wrapper
            .find('ButtonSecondary')
            .find('a')
            .simulate('click');
          return sleep(3);
        })
        .then(() => {
          expect(props.onSubmit).not.toHaveBeenCalled();
          expect(
            wrapper
              .find('[data-test="validation"]')
              .first()
              .text(),
          ).toBe('Order is not valid. Missing values: 1, 3.');
        });
    });
  });
});
