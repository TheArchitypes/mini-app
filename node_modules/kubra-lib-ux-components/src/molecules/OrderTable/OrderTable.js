import React, { Component } from 'react';
import autobind from 'class-autobind';
import PropTypes from 'prop-types';
import _ from 'lodash';

function createCollection(items, idPath, orderPath) {
  return _.map(items, (item, index) => ({
    id: _.get(item, idPath, index),
    order: _.get(item, orderPath, index + 1),
    data: item,
  }));
}

export class OrderTable extends Component {
  constructor(props) {
    super(props);
    autobind(this);
    this.state = {
      collection: createCollection(this.props.items, this.props.idPath, this.props.orderPath),
      form: createCollection(this.props.items, this.props.idPath, this.props.orderPath),
      error: undefined,
    };
  }
  getChildContext() {
    return {
      orderTable: {
        updateHandler: this.updateHandler,
        items: this.props.items,
        collection: this.state.collection,
        form: this.state.form,
        idPath: this.props.idPath,
        orderPath: this.props.orderPath,
      },
    };
  }
  componentWillReceiveProps(nextProps) {
    this.setState({
      collection: createCollection(nextProps.items, this.props.idPath, this.props.orderPath),
    });
  }
  handleSubmit() {
    const { onSubmit, orderPath } = this.props;
    onSubmit(
      _.sortBy(this.state.collection, 'order').map((item) => {
        if (orderPath) {
          return {
            ...item.data,
            [orderPath]: Number(item.order),
          };
        }
        return item.data;
      }),
    );
  }
  updateHandler(id) {
    return (orderValue) => {
      this.setState({
        form: _.map(this.state.form, (formItem) => {
          if (formItem.id === id) {
            return {
              ...formItem,
              order: orderValue,
            };
          }
          return formItem;
        }),
      });
    };
  }
  validate() {
    const { form, collection } = this.state;
    const validRange = _.range(1, collection.length + 1);
    const formRange = _.map(form, item => Number(item.order));
    const diff = _.difference(validRange, formRange);
    if (diff.length !== 0) {
      this.setState({ error: `Order is not valid. Missing values: ${diff.join(', ')}.` });
      return false;
    }
    this.setState({ error: undefined });
    return true;
  }
  updateOrder(cb) {
    if (!this.validate()) {
      return;
    }
    this.setState(
      {
        collection: _.cloneDeep(this.state.form),
      },
      cb,
    );
  }
  render() {
    const { updateOrder, handleSubmit } = this;
    const { error } = this.state;
    return React.Children.only(this.props.children(updateOrder, handleSubmit, error));
  }
}

{
  const { func, shape, arrayOf, oneOfType, string, number } = PropTypes;
  OrderTable.propTypes = {
    items: oneOfType([arrayOf(shape({})), arrayOf(string), arrayOf(number)]).isRequired,
    onSubmit: func.isRequired,
    children: func.isRequired,
    orderPath: string,
    idPath: string,
  };
  OrderTable.defaultProps = {
    idPath: undefined,
    orderPath: undefined,
  };
  OrderTable.childContextTypes = {
    orderTable: shape({
      form: arrayOf(shape({})).isRequired,
      updateHandler: func.isRequired,
      collection: arrayOf(shape({})).isRequired,
    }).isRequired,
  };
}

export default OrderTable;
