import React from 'react';
import { Link } from 'react-router';
import PropTypes from 'prop-types';
import { mergeClassNames } from '../lib/mergeClassNames';
import htmlProps from '../lib/htmlProps';
import { Icon } from '../atoms/icons';
import getIdWithSuffix from '../lib/getIdWithSuffix';
import { NavItemWithSubItems as _NavItemWithSubItems } from '../atoms/navigation/NavItemWithSubItems';

export const NavItemWithSubItems = _NavItemWithSubItems;

export function NavTitle(props) {
  const {
    linkTo,
    label,
    disabled,
    className,
    activeClassName,
    overrideLinkClass,
  } = props;

  // If no overrideLinkClass, use Link.
  const OverrideLink = overrideLinkClass || Link;
  const linkProps = (overrideLinkClass) ? {
    // Props for Router 4 Link
    activeclassname: mergeClassNames('active', activeClassName),
  } : {
    // Props for Router 3 Link
    activeClassName: mergeClassNames('active', activeClassName),
  };

  return (
    <OverrideLink
      className={mergeClassNames('nav-title', className)}
      {...htmlProps(props)}
      to={linkTo}
      {...linkProps}
      disabled={disabled}
    >
      <div>
        {label}
      </div>
    </OverrideLink>
  );
}

NavTitle.propTypes = {
  linkTo: PropTypes.string,
  label: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
  className: PropTypes.string,
  activeClassName: PropTypes.string,
  overrideLinkClass: PropTypes.func,
};

NavTitle.defaultProps = {
  linkTo: '',
  disabled: false,
  onSelectValue() {},
  className: '',
  activeClassName: '',
  overrideLinkClass: null,
};

export function NavItem(props) {
  const {
    linkTo,
    label,
    disabled,
    className,
    icon,
    activeClassName,
    overrideLinkClass,
  } = props;

  // If no overrideLinkClass, use Link.
  const OverrideLink = overrideLinkClass || Link;
  const linkProps = (overrideLinkClass) ? {
    // Props for Router 4 Link
    activeclassname: mergeClassNames('active', activeClassName),
  } : {
    // Props for Router 3 Link
    activeClassName: mergeClassNames('active', activeClassName),
  };

  return (
    <OverrideLink
      className={mergeClassNames('nav-item', className)}
      {...htmlProps(props)}
      to={linkTo}
      {...linkProps}
      disabled={disabled}
    >
      <li id={getIdWithSuffix(props, 'li')}>
        <Icon className={`${icon} small`} name={icon} />
        <span className="label">{label}</span>
      </li>
    </OverrideLink>
  );
}

NavItem.propTypes = {
  linkTo: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
  className: PropTypes.string,
  activeClassName: PropTypes.string,
  icon: PropTypes.string,
  overrideLinkClass: PropTypes.func,
};

NavItem.defaultProps = {
  disabled: false,
  onSelectValue() {},
  className: '',
  activeClassName: '',
  icon: '',
  overrideLinkClass: null,
};

export function NavContainer(props) {
  const { children, className, topPadding } = props;
  return (
    <div
      className={mergeClassNames('nav-container', className)}
      {...htmlProps(props)}
    >
      <div className="top-padding" style={{ flex: `0 0 ${topPadding}` }} />
      <div className="scroll">
        {children}
      </div>
    </div>
  );
}

NavContainer.propTypes = {
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  topPadding: PropTypes.string,
};

NavContainer.defaultProps = {
  className: '',
  topPadding: 0,
};

export default {
  NavTitle,
  NavItem,
  NavContainer,
  NavItemWithSubItems,
};
