import React, { Component } from 'react';
import propTypes from 'prop-types';
import _ from 'lodash';

import { Pagination } from './pagination';
import { Icon } from '../atoms/icons';

export const SORT_ASCENDING = 'asc';
export const SORT_DECENDING = 'desc';

/**
 * Used as renderRow function if not provided by props
 */
function defaultRenderRow(rowData, columns) {
  const rowColumns = Object.keys(rowData).map(
    (key, index) => {
      // if columns were provided...
      if (columns.length > 0) {
        // check the columns object to figure out which property(path) we're looking for
        const path = _.get(columns, [index, 'path']);
        return <td key={key}>{_.get(rowData, path)}</td>;
      }
      // else just return the next property on the rowData object (use key)
      return <td key={key}>{_.toString(_.get(rowData, key))}</td>;
    },
  );

  return (<tr>{rowColumns}</tr>);
}

/**
 * Used as the click handler for column header if not provided via props
 * @param {*} column
 */
function defaultOnHeaderClick(column) {
  // toggle the sort direction
  const sortDirection =
    (this.state.sortDirection === SORT_DECENDING || null) ? SORT_ASCENDING : SORT_DECENDING;
  this.setState({
    sortBy: column.path,
    sortDirection,
  });
}

/**
 * Table Component
 */
export class Table extends Component {

  constructor(props) {
    super(props);
    const { initialSortBy, initialSortDirection, initialPage } = props;
    this.state = {
      sortBy: initialSortBy,
      sortDirection: initialSortDirection,
      currentPage: initialPage,
    };
    this.defaultOnHeaderClick = defaultOnHeaderClick.bind(this);
  }

  render() {
    const { columns, data, renderRow, sort, recordsPerPage, padTableRows } = this.props;
    const { sortBy, sortDirection, currentPage } = this.state;
    const onHeaderClick = this.props.onHeaderClick || this.defaultOnHeaderClick;

    // default pagination values
    let totalPages = 1;
    let startAtIndex = 0;
    let endAtIndex = (data.length - 1);

    // if recordsPerPage is set...
    if (recordsPerPage != null) {
      // calculate totalPages by dividing and rounding up...
      totalPages = _.ceil(_.divide(data.length, recordsPerPage));
      // calcuate start at....
      // if page 0: start at 0, and end at (recordsPerPage - 1)
      if (currentPage === 0) {
        startAtIndex = 0;
        endAtIndex = (recordsPerPage - 1);
      } else {
        // else we are not at page 0...
        startAtIndex = (currentPage * recordsPerPage);
        endAtIndex = ((currentPage * recordsPerPage) + (recordsPerPage - 1));
      }
    }

    // sort the data
    const sortedData = sort(data, sortBy, sortDirection);
    // get the rows that we need for this page
    let tableRows =
      sortedData.slice(startAtIndex, (endAtIndex + 1)).map(dataRow => renderRow(dataRow, columns));


    if (padTableRows) {
      let colsToSpan;
      // if we have columns, span as many as there are...
      if (columns.length > 0) {
        colsToSpan = columns.length;
      } else {
        colsToSpan = Object.keys(data[0]).length();
      }

      while (tableRows.length < recordsPerPage) {
        tableRows = tableRows.concat(<tr><td colSpan={colsToSpan}>&nbsp;</td></tr>);
      }
    }

    return (
      <div className="kubra-table-container">
        <table className="kubra-table striped">
          {
            // if columns are defined, render the headers
            columns.length > 0 &&
            <thead>
              <tr>
                {
                  // iterate through the columns to render table headers
                  columns.map(
                    (column, index) => (
                      <th
                        key={index}
                        className={`${column.canSort ? 'sortable' : null}`}
                        onClick={() => {
                          // if sort is enabled, handle click
                          if (column.canSort) {
                            onHeaderClick(column);
                          }
                        }}
                      >
                        <div className="kubra-table-header">
                          <div className="name">
                            {column.name}
                          </div>
                          <div className="icon">
                            {
                              // if we are currenly sorting by this column, add icon
                              sortBy === column.path ?
                                <Icon
                                  className="small"
                                  name={sortDirection === SORT_ASCENDING ?
                                    'caret-top' :
                                    'caret-bottom'}
                                />
                                :
                                null
                            }
                          </div>
                        </div>
                      </th>
                    ),
                  )
                }
              </tr>
            </thead>
          }
          <tbody>
            { tableRows }
          </tbody>
        </table>
        {
          // if recordsPerPage is not null...
          recordsPerPage != null ?
          // ...then show pagination
            <div className="kubra-table-pagination">
              <Pagination
                onClick={(index) => { this.setState({ currentPage: index }); }}
                currentPage={this.state.currentPage}
                totalPages={totalPages}
              />
            </div>
            :
            // ...else don't show pagination
            null
        }
      </div>
    );
  }
}

{
  const { arrayOf, shape, func, number, string, bool } = propTypes;
  Table.propTypes = {
    /**
     * An object representing the table columns
     * @prop {string} name the value to be rendered in the th element
     * @prop {string} path the path to use on the data object (row) when sorting or displaying
     * @prop {bool}   canSort a boolean to determine if a column is sortable or not
     */
    columns: arrayOf(shape({})),
    /**
     * An array of objects representing the table data
     * Each element of the array representing a row
     */
    data: arrayOf(shape({})),
    /**
     * A function to handle rendering a row
     * @param {*} rowData the object representing the row (from the data array)
     * @param {*} columns the columns object
     * @return {*} JSX element
     */
    renderRow: func,
    /**
     * A function to handle sorting the data
     * @param {*} data the data to be sorted (table data)
     * @param {*} sortBy the property on each data element that will be compared
     * @param {*} sortDirection the sort direction (ASC/DESC)
     * @return sorted data
     */
    sort: func,
    /**
     * A function to handle header click
     * @param {*} column the column object associated with the header that was clicked
     */
    onHeaderClick: func,
    /** Number of records to show on each page, default is null which disables pagination */
    recordsPerPage: number,
    /** Inital column to sort, equal to path on column, default is no sorting */
    initialSortBy: string,
    /** Initial sort direction, default is SORT_ASCENDING */
    initialSortDirection: string,
    /** Initial page number */
    initialPage: number,
    /** Flag to pad table rows (keep consistent table height) */
    padTableRows: bool,
  };

  Table.defaultProps = {
    columns: [],
    data: [],
    renderRow: defaultRenderRow,
    sort: _.orderBy,
    onHeaderClick: null,
    recordsPerPage: null,
    initialSortBy: null,
    initialSortDirection: null,
    initialPage: 0,
    padTableRows: false,
  };
}

export default {
  Table,
};
