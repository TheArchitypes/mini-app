'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleButton = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _htmlProps = require('../../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function oppositeLabelFloat(value) {
  return value.toLowerCase() === 'left' ? 'right' : 'left';
}

var ToggleButton = exports.ToggleButton = function (_Component) {
  _inherits(ToggleButton, _Component);

  function ToggleButton(props) {
    _classCallCheck(this, ToggleButton);

    var _this = _possibleConstructorReturn(this, (ToggleButton.__proto__ || Object.getPrototypeOf(ToggleButton)).call(this, props));

    _this.state = _this.defaultState();
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(ToggleButton, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var value = _ref.value;

      if (value === undefined) {
        return;
      }
      this.setState(function () {
        return { value: value };
      });
    }
  }, {
    key: 'onSelect',
    value: function onSelect(value) {
      this.setState(function () {
        return { value: value };
      });
    }
  }, {
    key: 'defaultState',
    value: function defaultState() {
      return {
        value: this.props.value || false
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          name = _props.name,
          onClick = _props.onClick,
          label = _props.label,
          labelFloat = _props.labelFloat;
      var onSelect = this.onSelect;


      var _onChange = function _onChange(value) {
        if (value !== _this2.state.value) {
          onSelect(value);
          onClick(value);
        }
      };

      return _react2.default.createElement(
        'div',
        null,
        !_lodash2.default.isNil(label) && _react2.default.createElement(
          'span',
          { className: 'toggle-label', style: { float: '' + labelFloat } },
          label
        ),
        _react2.default.createElement(
          'span',
          { className: 'toggle-cont', style: { float: oppositeLabelFloat(labelFloat) } },
          _react2.default.createElement('input', Object.assign({}, (0, _htmlProps2.default)(this.props), {
            name: name,
            id: 'toggle-input-' + _lodash2.default.kebabCase(name),
            className: 'toggle flat',
            type: 'checkbox',
            onChange: function onChange() {
              return _onChange(!_this2.state.value);
            },
            checked: this.state.value
          })),
          _react2.default.createElement('label', {
            className: 'toggle-button',
            htmlFor: 'toggle-input-' + _lodash2.default.kebabCase(name)
          })
        )
      );
    }
  }]);

  return ToggleButton;
}(_react.Component);

var string = _propTypes2.default.string,
    func = _propTypes2.default.func,
    bool = _propTypes2.default.bool;

ToggleButton.propTypes = {
  name: string,
  value: bool,
  label: string,
  labelFloat: string,
  onClick: func
};

ToggleButton.defaultProps = {
  name: 'test',
  value: false,
  label: null,
  labelFloat: 'left',
  onClick: function onClick() {}
};

exports.default = {
  ToggleButton: ToggleButton
};