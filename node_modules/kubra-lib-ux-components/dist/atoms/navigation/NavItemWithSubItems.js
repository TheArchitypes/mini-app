'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavItemWithSubItems = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.NavSubItemContainer = NavSubItemContainer;
exports.NavSubItem = NavSubItem;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _mergeClassNames = require('../../lib/mergeClassNames');

var _htmlProps = require('../../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

var _icons = require('../icons');

var _getIdWithSuffix = require('../../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NavItemWithSubItems = exports.NavItemWithSubItems = function (_Component) {
  _inherits(NavItemWithSubItems, _Component);

  function NavItemWithSubItems(props) {
    _classCallCheck(this, NavItemWithSubItems);

    var _this = _possibleConstructorReturn(this, (NavItemWithSubItems.__proto__ || Object.getPrototypeOf(NavItemWithSubItems)).call(this, props));

    _this.state = {
      navItemIsActive: false
    };
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(NavItemWithSubItems, [{
    key: 'toggleNavItemIsActive',
    value: function toggleNavItemIsActive() {
      this.setState({
        navItemIsActive: !this.state.navItemIsActive
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          disabled = _props.disabled,
          className = _props.className,
          icon = _props.icon,
          subItems = _props.subItems,
          overrideLinkClass = _props.overrideLinkClass;
      var navItemIsActive = this.state.navItemIsActive;


      return _react2.default.createElement(
        'div',
        Object.assign({
          className: (0, _mergeClassNames.mergeClassNames)('nav-item', className)
        }, (0, _htmlProps2.default)(this.props), {
          disabled: disabled
        }),
        _react2.default.createElement(
          'li',
          {
            id: (0, _getIdWithSuffix2.default)(this.props, 'li'),
            onClick: this.toggleNavItemIsActive,
            role: 'menuitem'
          },
          _react2.default.createElement(_icons.Icon, { className: icon + ' small', name: icon }),
          _react2.default.createElement(
            'span',
            { className: 'label' },
            label
          )
        ),
        _react2.default.createElement(NavSubItemContainer, {
          items: subItems,
          isOpen: navItemIsActive,
          id: (0, _getIdWithSuffix2.default)(this.props, 'subitems'),
          overrideLinkClass: overrideLinkClass
        })
      );
    }
  }]);

  return NavItemWithSubItems;
}(_react.Component);

NavItemWithSubItems.propTypes = {
  label: _propTypes2.default.string.isRequired,
  disabled: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  icon: _propTypes2.default.string,
  subItems: _propTypes2.default.arrayOf(_propTypes2.default.shape({})),
  overrideLinkClass: _propTypes2.default.func
};

NavItemWithSubItems.defaultProps = {
  disabled: false,
  onSelectValue: function onSelectValue() {},

  className: '',
  activeClassName: '',
  icon: '',
  subItems: [],
  overrideLinkClass: null
};

function NavSubItemContainer(props) {
  var className = props.className,
      items = props.items,
      isOpen = props.isOpen,
      overrideLinkClass = props.overrideLinkClass;

  var lastIndex = items.length - 1;
  var maxHeightOnOpen = items.length * 35 + 30;

  return _react2.default.createElement(
    'div',
    Object.assign({
      className: (0, _mergeClassNames.mergeClassNames)('nav-sub-item-container ' + (isOpen ? 'is-open' : ''), className),
      style: { maxHeight: (isOpen ? maxHeightOnOpen : 0) + 'px' }
    }, (0, _htmlProps2.default)(props)),
    _react2.default.createElement(
      'div',
      { className: 'sub-items-icons' },
      items.map(function (item, index) {
        return _react2.default.createElement(
          'li',
          { className: 'sub-item-icon ' + (index === lastIndex ? 'last' : '') + ' ' + (index === 0 ? 'first' : ''), key: index },
          _react2.default.createElement('div', { className: 'sub-item-line-horizontal' })
        );
      })
    ),
    _react2.default.createElement(
      'div',
      { className: 'sub-items-list' },
      items.map(function (item, index) {
        return _react2.default.createElement(NavSubItem, {
          key: index,
          label: item.label,
          linkTo: item.linkTo,
          icon: item.icon,
          index: index,
          lastItem: index === lastIndex,
          id: (0, _getIdWithSuffix2.default)(props, index),
          overrideLinkClass: overrideLinkClass
        });
      })
    )
  );
}

NavSubItemContainer.propTypes = {
  className: _propTypes2.default.string,
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({})),
  isOpen: _propTypes2.default.bool.isRequired,
  overrideLinkClass: _propTypes2.default.func
};

NavSubItemContainer.defaultProps = {
  className: '',
  items: [],
  overrideLinkClass: null
};

function NavSubItem(props) {
  var linkTo = props.linkTo,
      label = props.label,
      disabled = props.disabled,
      className = props.className,
      icon = props.icon,
      activeClassName = props.activeClassName,
      lastItem = props.lastItem,
      overrideLinkClass = props.overrideLinkClass;

  // If no overrideLinkClass, use Link.

  var OverrideLink = overrideLinkClass || _reactRouter.Link;
  var linkProps = overrideLinkClass ? {
    // Props for Router 4 Link
    activeclassname: (0, _mergeClassNames.mergeClassNames)('active', activeClassName)
  } : {
    // Props for Router 3 Link
    activeClassName: (0, _mergeClassNames.mergeClassNames)('active', activeClassName)
  };

  return _react2.default.createElement(
    OverrideLink,
    Object.assign({
      className: (0, _mergeClassNames.mergeClassNames)('nav-sub-item ' + (lastItem ? 'last' : ''), className)
    }, (0, _htmlProps2.default)(props), {
      to: linkTo
    }, linkProps, {
      disabled: disabled
    }),
    _react2.default.createElement(
      'li',
      { id: (0, _getIdWithSuffix2.default)(props, 'li') },
      _react2.default.createElement(_icons.Icon, { className: icon + ' small', name: icon }),
      _react2.default.createElement(
        'span',
        { className: 'label' },
        label
      )
    )
  );
}

NavSubItem.propTypes = {
  linkTo: _propTypes2.default.string.isRequired,
  label: _propTypes2.default.string.isRequired,
  disabled: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  activeClassName: _propTypes2.default.string,
  icon: _propTypes2.default.string,
  lastItem: _propTypes2.default.bool,
  overrideLinkClass: _propTypes2.default.func
};

NavSubItem.defaultProps = {
  disabled: false,
  onSelectValue: function onSelectValue() {},

  className: '',
  activeClassName: '',
  icon: 'default',
  lastItem: false,
  overrideLinkClass: null
};