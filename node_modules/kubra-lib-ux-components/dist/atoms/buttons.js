'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleButton = exports.ButtonTertiary = exports.ButtonSecondary = exports.ButtonPrimary = exports.FlatButton = exports.RaisedButton = undefined;
exports.IconButton = IconButton;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _preventDefault = require('../lib/preventDefault');

var _preventDefault2 = _interopRequireDefault(_preventDefault);

var _checkDisabled = require('../lib/checkDisabled');

var _checkDisabled2 = _interopRequireDefault(_checkDisabled);

var _mergeClassNames = require('../lib/mergeClassNames');

var _htmlProps = require('../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

var _icons = require('./icons');

var _ToggleButton2 = require('./button/ToggleButton');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ButtonFactory(id) {
  function Button(props) {
    var label = props.label,
        useButtonElement = props.useButtonElement,
        onClick = props.onClick,
        className = props.className,
        icon = props.icon,
        disabled = props.disabled;

    var buttonContent = _react2.default.createElement(
      'span',
      null,
      icon && _react2.default.createElement('span', { className: 'icon iconic', 'data-glyph': icon }),
      _react2.default.createElement(
        'span',
        { className: 'label' },
        label
      )
    );
    if (useButtonElement) {
      return _react2.default.createElement(
        'button',
        Object.assign({}, (0, _htmlProps2.default)(props), {
          onClick: (0, _checkDisabled2.default)(disabled, onClick),
          className: (0, _mergeClassNames.mergeClassNames)('button ' + id + ' ' + (icon && 'button-icon') + ' ' + (disabled && 'disabled'), className)
        }),
        buttonContent
      );
    }

    return _react2.default.createElement(
      'a',
      Object.assign({}, (0, _htmlProps2.default)(props), {
        href: '#' + id,
        onClick: (0, _preventDefault2.default)((0, _checkDisabled2.default)(disabled, onClick)),
        className: (0, _mergeClassNames.mergeClassNames)('button ' + id + ' ' + (icon && 'button-icon') + ' ' + (disabled && 'disabled'), className)
      }),
      buttonContent
    );
  }

  Button.displayName = _lodash2.default.startCase(id).replace(/\s/, '');

  Button.propTypes = {
    label: _propTypes2.default.string.isRequired,
    icon: _propTypes2.default.string,
    useButtonElement: _propTypes2.default.bool,
    onClick: _propTypes2.default.func,
    className: _propTypes2.default.string,
    disabled: _propTypes2.default.bool
  };

  Button.defaultProps = {
    onClick: function onClick() {},

    useButtonElement: false,
    className: '',
    icon: undefined,
    disabled: false
  };

  return Button;
}

var RaisedButton = exports.RaisedButton = ButtonFactory('button-primary');
var FlatButton = exports.FlatButton = ButtonFactory('button-flat');
var ButtonPrimary = exports.ButtonPrimary = ButtonFactory('button-primary');
var ButtonSecondary = exports.ButtonSecondary = ButtonFactory('button-secondary');
var ButtonTertiary = exports.ButtonTertiary = ButtonFactory('button-tertiary');
var ToggleButton = exports.ToggleButton = _ToggleButton2.ToggleButton;

function IconButton(props) {
  var useButtonElement = props.useButtonElement,
      onClick = props.onClick,
      className = props.className,
      icon = props.icon,
      hasCircle = props.hasCircle,
      isInline = props.isInline,
      disabled = props.disabled;

  var circleClass = hasCircle ? 'circle' : '';
  var inlineClass = isInline ? 'inline' : '';
  var classNames = 'button icon-button ' + icon + ' ' + circleClass + ' ' + inlineClass + ' ' + (disabled && 'disabled');

  if (useButtonElement) {
    return _react2.default.createElement(
      'button',
      Object.assign({}, (0, _htmlProps2.default)(props), {
        onClick: (0, _checkDisabled2.default)(disabled, onClick),
        className: (0, _mergeClassNames.mergeClassNames)(classNames, className)
      }),
      _react2.default.createElement(_icons.Icon, { name: icon })
    );
  }

  return _react2.default.createElement(
    'a',
    Object.assign({}, (0, _htmlProps2.default)(props), {
      href: '#icon-button',
      onClick: (0, _preventDefault2.default)((0, _checkDisabled2.default)(disabled, onClick)),
      className: (0, _mergeClassNames.mergeClassNames)(classNames, className)
    }),
    _react2.default.createElement(_icons.Icon, { name: icon })
  );
}

IconButton.propTypes = {
  useButtonElement: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,
  className: _propTypes2.default.string,
  icon: _propTypes2.default.string.isRequired,
  hasCircle: _propTypes2.default.bool,
  isInline: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool
};

IconButton.defaultProps = {
  onClick: function onClick() {},

  useButtonElement: false,
  className: '',
  hasCircle: false,
  isInline: false,
  disabled: false
};

exports.default = {
  RaisedButton: RaisedButton,
  FlatButton: FlatButton,
  ButtonPrimary: ButtonPrimary,
  ButtonSecondary: ButtonSecondary,
  ButtonTertiary: ButtonTertiary,
  IconButton: IconButton,
  ToggleButton: ToggleButton
};