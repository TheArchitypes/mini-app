'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _popper = require('popper.js');

var _popper2 = _interopRequireDefault(_popper);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tooltip = exports.Tooltip = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip() {
    _classCallCheck(this, Tooltip);

    return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));
  }

  _createClass(Tooltip, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.makePopper();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.popper.destroy();
      this.makePopper();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.popper.destroy();
    }
  }, {
    key: 'makePopper',
    value: function makePopper() {
      var align = this.props.align;

      var placement = {
        left: 'bottom-start',
        middle: 'bottom',
        right: 'bottom-end'
      };
      this.popper = new _popper2.default(this.hoverZone, this.tooltipBody, {
        placement: placement[align],
        modifiers: {
          keepTogether: {
            enabled: true
          },
          arrow: {
            enabled: true,
            element: this.arrow
          }
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          align = _props.align,
          tooltip = _props.tooltip;

      return _react2.default.createElement(
        'span',
        { className: 'tooltip ' + align },
        _react2.default.createElement(
          'span',
          {
            className: 'hover-zone',
            ref: function ref(_ref) {
              _this2.hoverZone = _ref;
            }
          },
          children
        ),
        _react2.default.createElement(
          'span',
          {
            className: 'body',
            ref: function ref(_ref3) {
              _this2.tooltipBody = _ref3;
            }
          },
          tooltip,
          _react2.default.createElement('span', {
            className: 'arrow',
            ref: function ref(_ref2) {
              _this2.arrow = _ref2;
            }
          })
        )
      );
    }
  }]);

  return Tooltip;
}(_react.Component);

Tooltip.propTypes = {
  tooltip: _propTypes2.default.element.isRequired,
  children: _propTypes2.default.element.isRequired,
  align: _propTypes2.default.oneOf(['left', 'middle', 'right'])
};

Tooltip.defaultProps = {
  align: 'middle'
};

exports.default = Tooltip;