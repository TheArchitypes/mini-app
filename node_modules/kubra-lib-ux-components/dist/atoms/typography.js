'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Subheader = Subheader;
exports.ListItem = ListItem;
exports.LinkOnHover = LinkOnHover;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouter = require('react-router');

var _mergeClassNames = require('../lib/mergeClassNames');

var _htmlProps = require('../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Subheader(props) {
  var children = props.children,
      className = props.className;

  return _react2.default.createElement(
    'p',
    Object.assign({}, (0, _htmlProps2.default)(props), { className: (0, _mergeClassNames.mergeClassNames)('subheader', className) }),
    children
  );
}

Subheader.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string
};

Subheader.defaultProps = {
  className: ''
};

function ListItem(props) {
  var children = props.children,
      className = props.className;

  return _react2.default.createElement(
    'li',
    Object.assign({}, (0, _htmlProps2.default)(props), { className: (0, _mergeClassNames.mergeClassNames)('list-item', className) }),
    children
  );
}

{
  var node = _propTypes2.default.node,
      string = _propTypes2.default.string;

  ListItem.propTypes = {
    children: node.isRequired,
    className: string
  };

  ListItem.defaultProps = {
    className: ''
  };
}

function LinkOnHover(props) {
  var children = props.children,
      className = props.className,
      route = props.route,
      useHref = props.useHref;


  var goToLink = function goToLink(link) {
    return function () {
      if (!useHref) _reactRouter.browserHistory.push(link);
    };
  };

  return _react2.default.createElement(
    'a',
    Object.assign({}, (0, _htmlProps2.default)(props), {
      className: (0, _mergeClassNames.mergeClassNames)('link link-on-hover', className),
      onClick: goToLink(route),
      href: useHref ? route : '#1'
    }),
    children
  );
}

LinkOnHover.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  route: _propTypes2.default.string,
  useHref: _propTypes2.default.bool
};

LinkOnHover.defaultProps = {
  className: '',
  route: '',
  useHref: true
};

exports.default = {
  Subheader: Subheader,
  ListItem: ListItem,
  LinkOnHover: LinkOnHover
};