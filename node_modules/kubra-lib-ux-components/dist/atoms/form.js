'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectField = exports.TextArea = exports.TextField = exports.RadioButtonGroup = exports.RadioButton = exports.AccordionField = exports.SelectCustomFieldInput = exports.MultiSelectField = exports.CheckBox = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.Slider = Slider;
exports.MenuItem = MenuItem;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _mergeClassNames = require('../lib/mergeClassNames');

var _htmlProps = require('../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

var _twoWay = require('../lib/twoWay');

var _twoWay2 = _interopRequireDefault(_twoWay);

var _CheckBox2 = require('./form/CheckBox');

var _MultiSelectField2 = require('./form/MultiSelectField');

var _SelectCustomFieldInput2 = require('./form/SelectCustomFieldInput');

var _AccordionField2 = require('./form/AccordionField');

var _RadioButtonGroup2 = require('./form/RadioButtonGroup');

var _TextArea2 = require('./form/TextArea');

var _TextField2 = require('./form/TextField');

var _getIdWithSuffix = require('../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CheckBox = exports.CheckBox = _CheckBox2.CheckBox;
var MultiSelectField = exports.MultiSelectField = _MultiSelectField2.MultiSelectField;
var SelectCustomFieldInput = exports.SelectCustomFieldInput = _SelectCustomFieldInput2.SelectCustomFieldInput;
var AccordionField = exports.AccordionField = _AccordionField2.AccordionField;
var RadioButton = exports.RadioButton = _RadioButtonGroup2.RadioButton;
var RadioButtonGroup = exports.RadioButtonGroup = _RadioButtonGroup2.RadioButtonGroup;
var TextField = exports.TextField = _TextField2.TextField;
var TextArea = exports.TextArea = _TextArea2.TextArea;

function Slider(props) {
  var min = props.min,
      max = props.max,
      step = props.step,
      onChange = props.onChange,
      value = props.value,
      className = props.className,
      disabled = props.disabled,
      id = props.id;


  return _react2.default.createElement('input', Object.assign({
    type: 'range',
    disabled: disabled,
    min: min,
    max: max,
    step: step
  }, (0, _twoWay2.default)({ onChange: onChange, value: value }), {
    className: (0, _mergeClassNames.mergeClassNames)('kubra-range ' + (disabled ? 'disabled' : null), className),
    id: id + '-form-slider'
  }));
}

Slider.propTypes = {
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  step: _propTypes2.default.number,
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  id: _propTypes2.default.string.isRequired
};

Slider.defaultProps = {
  min: 0,
  max: 1,
  step: 1,
  value: undefined,
  onChange: undefined,
  className: '',
  disabled: false
};

var SelectField = exports.SelectField = function (_Component) {
  _inherits(SelectField, _Component);

  function SelectField(props) {
    _classCallCheck(this, SelectField);

    var _this = _possibleConstructorReturn(this, (SelectField.__proto__ || Object.getPrototypeOf(SelectField)).call(this, props));

    _this.state = {
      showMenu: false,
      selectValue: _this.props.value || _this.props.defaultValue
    };
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  // if the props update, update the selectValue on local state


  _createClass(SelectField, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({ selectValue: nextProps.value || nextProps.defaultValue });
    }
  }, {
    key: 'onSelectValue',
    value: function onSelectValue(selectValue) {
      this.setState(function () {
        return {
          selectValue: selectValue
        };
      });
    }
  }, {
    key: 'onToggleMenu',
    value: function onToggleMenu(showMenu) {
      if (!this.props.disabled) {
        this.setState(function () {
          return {
            showMenu: showMenu
          };
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          name = _props.name,
          children = _props.children,
          onChange = _props.onChange,
          className = _props.className,
          defaultValue = _props.defaultValue,
          disabled = _props.disabled;
      var _state = this.state,
          showMenu = _state.showMenu,
          selectValue = _state.selectValue;
      var onToggleMenu = this.onToggleMenu,
          onSelectValue = this.onSelectValue;


      var selectLabel = this.props.label;
      // Need to update internal state to update input
      // and need to update parent component if two-way-databinding is set
      var _onSelectValue = function _onSelectValue(value) {
        if (!disabled) {
          onChange(value);
          onSelectValue(value);
          onToggleMenu(false);
        }
      };

      var currentLabel = 'Please select one...';

      // iterate through all menuitems and pass in _onSelectValue to run on click of menu item
      // Find the currently selected menu item and pull the label value for currentLabel
      var _children = _react2.default.createElement(
        'ul',
        null,
        children.map(function (element, elementIndex) {
          var _element$props = element.props,
              value = _element$props.value,
              label = _element$props.label,
              elementId = _element$props.id;

          var childClassName = elementIndex === children.length - 1 ? 'last-child' : '';

          if (value === selectValue) {
            currentLabel = label;
          }

          return _react2.default.cloneElement(element, {
            key: 'option-' + elementIndex,
            onSelectValue: _onSelectValue,
            id: elementId,
            className: childClassName
          });
        })
      );

      // Always ensure hard binding input value has a value thats not undefined
      var hiddenValue = selectValue || defaultValue || '';

      // Render a readonly input to record the value for HTML5 form support

      return _react2.default.createElement(
        'div',
        { className: (0, _mergeClassNames.mergeClassNames)('select ' + (disabled ? 'disabled' : ''), className), id: (0, _getIdWithSuffix2.default)(this.props, 'container') },
        selectLabel && _react2.default.createElement(
          'label',
          { htmlFor: name },
          selectLabel
        ),
        _react2.default.createElement(
          'div',
          { className: 'select-wrapper' },
          _react2.default.createElement('input', { id: (0, _getIdWithSuffix2.default)(this.props, 'input-value'), type: 'hidden', name: name, value: hiddenValue, disabled: disabled }),
          _react2.default.createElement('div', { className: showMenu ? 'up-caret' : 'down-caret', role: 'presentation', onClick: function onClick() {
              return onToggleMenu(!showMenu);
            } }),
          _react2.default.createElement('input', {
            type: 'text',
            readOnly: true,
            value: currentLabel,
            onClick: function onClick() {
              return onToggleMenu(!showMenu);
            },
            id: (0, _getIdWithSuffix2.default)(this.props, 'input-on-click')
          }),
          showMenu && _children
        )
      );
    }
  }]);

  return SelectField;
}(_react.Component);

SelectField.propTypes = {
  name: _propTypes2.default.string.isRequired,
  children: _propTypes2.default.node.isRequired,
  onChange: _propTypes2.default.func,
  value: _propTypes2.default.string,
  label: _propTypes2.default.string,
  className: _propTypes2.default.string,
  defaultValue: _propTypes2.default.string,
  disabled: _propTypes2.default.bool
};

SelectField.defaultProps = {
  onChange: function onChange() {},

  value: '',
  label: null,
  className: '',
  defaultValue: '',
  disabled: false
};

function MenuItem(props) {
  var value = props.value,
      label = props.label,
      disabled = props.disabled,
      className = props.className,
      onSelectValue = props.onSelectValue,
      id = props.id;

  var onClick = function onClick(event) {
    event.preventDefault();
    if (!disabled) {
      onSelectValue(value);
    }
  };
  return _react2.default.createElement(
    'a',
    Object.assign({}, (0, _htmlProps2.default)(props), { onClick: onClick, href: '#menuitem', id: id + '-menu-item-select-' + _lodash2.default.kebabCase(_lodash2.default.camelCase(label)) }),
    _react2.default.createElement(
      'li',
      { className: (0, _mergeClassNames.mergeClassNames)('option', className), id: id + '-menu-item-' + _lodash2.default.kebabCase(_lodash2.default.camelCase(label)) },
      label
    )
  );
}

MenuItem.propTypes = {
  value: _propTypes2.default.string.isRequired,
  label: _propTypes2.default.string.isRequired,
  onSelectValue: _propTypes2.default.func,
  disabled: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  id: _propTypes2.default.string.isRequired
};

MenuItem.defaultProps = {
  disabled: false,
  onSelectValue: function onSelectValue() {},

  className: ''
};

exports.default = {
  TextField: TextField,
  TextArea: TextArea,
  RadioButton: RadioButton,
  RadioButtonGroup: RadioButtonGroup,
  CheckBox: CheckBox,
  SelectField: SelectField,
  MenuItem: MenuItem,
  Slider: Slider
};