'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectCustomFieldInput = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mergeClassNames = require('../../lib/mergeClassNames');

var _getIdWithSuffix = require('../../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function moveCursorToEnd(element) {
  var newElement = element;
  if (typeof element.selectionStart === 'number') {
    newElement.selectionStart = element.selectionEnd;
    newElement.selectionEnd = element.value.length;
  } else if (typeof element.createTextRange !== 'undefined') {
    element.focus();
    var range = element.createTextRange();
    range.collapse(false);
    range.select();
  }
}

function setFocus(input) {
  if (input && input.name === 'select-field-custom') {
    input.focus();
    moveCursorToEnd(input);
  }
}

var SelectCustomFieldInput = exports.SelectCustomFieldInput = function (_Component) {
  _inherits(SelectCustomFieldInput, _Component);

  function SelectCustomFieldInput(props) {
    _classCallCheck(this, SelectCustomFieldInput);

    var _this = _possibleConstructorReturn(this, (SelectCustomFieldInput.__proto__ || Object.getPrototypeOf(SelectCustomFieldInput)).call(this, props));

    _this.state = {
      showMenu: false,
      selectValue: _this.props.value || _this.props.defaultValue,
      showInput: false,
      customValue: ''
    };
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  // if the props update, update the selectValue on local state


  _createClass(SelectCustomFieldInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var selectValue = this.state.selectValue;

      if (selectValue !== 'custom') {
        this.setState({
          selectValue: nextProps.value || nextProps.defaultValue,
          showInput: false
        });
      }
    }
  }, {
    key: 'onSelectValue',
    value: function onSelectValue(selectValue) {
      this.setState({
        selectValue: selectValue,
        showInput: selectValue === 'custom'
      });
    }
  }, {
    key: 'onToggleMenu',
    value: function onToggleMenu(showMenu) {
      if (!this.props.disabled) {
        this.setState(function () {
          return {
            showMenu: showMenu,
            showInput: false
          };
        });
      }
    }
  }, {
    key: 'onChangeCustom',
    value: function onChangeCustom(value) {
      var onChange = this.props.onChange;

      this.setState({
        customValue: value
      }, function () {
        onChange(value);
      });
    }
  }, {
    key: 'onApply',
    value: function onApply() {
      var customValue = this.state.customValue;

      this.setState({
        selectValue: customValue,
        showInput: false,
        showMenu: false
      });
    }
  }, {
    key: 'onClear',
    value: function onClear() {
      this.setState({
        customValue: ''
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          name = _props.name,
          children = _props.children,
          onChange = _props.onChange,
          className = _props.className,
          defaultValue = _props.defaultValue,
          disabled = _props.disabled,
          selectLabel = _props.label;
      var _state = this.state,
          showMenu = _state.showMenu,
          selectValue = _state.selectValue,
          showInput = _state.showInput,
          customValue = _state.customValue;
      var onToggleMenu = this.onToggleMenu,
          onSelectValue = this.onSelectValue,
          onChangeCustom = this.onChangeCustom,
          onApply = this.onApply,
          onClear = this.onClear;

      // Need to update internal state to update input
      // and need to update parent component if two-way-databinding is set

      var _onSelectValue = function _onSelectValue(value) {
        onChange(value);
        onSelectValue(value);
        onToggleMenu(false);
      };

      var currentLabel = 'Please select one...';
      if (selectValue === customValue) {
        currentLabel = selectValue;
      }

      // iterate through all menuitems and pass in _onSelectValue to run on click of menu item
      // Find the currently selected menu item and pull the label value for currentLabel
      var _children = _react2.default.createElement(
        'ul',
        null,
        children.map(function (element, elementIndex) {
          var _element$props = element.props,
              value = _element$props.value,
              label = _element$props.label,
              elementId = _element$props.id;

          var childClassName = elementIndex === children.length - 1 ? 'last-child' : '';

          if (value === selectValue) {
            currentLabel = label;
          }

          return _react2.default.cloneElement(element, {
            key: 'option-' + elementIndex,
            onSelectValue: _onSelectValue,
            id: elementId,
            className: childClassName
          });
        }),
        !showInput && _react2.default.createElement(
          'a',
          { onClick: function onClick() {
              return onSelectValue('custom');
            }, href: '#menuitem' },
          _react2.default.createElement(
            'li',
            { className: 'option' },
            'CUSTOM',
            customValue.length > 0 && ': ' + customValue
          )
        ),
        showInput && _react2.default.createElement(
          'a',
          { href: '#menuitem' },
          _react2.default.createElement(
            'li',
            { className: (0, _mergeClassNames.mergeClassNames)('option', 'custom-input') },
            _react2.default.createElement(
              'div',
              { className: 'flex-grid' },
              _react2.default.createElement(
                'div',
                { className: 'row' },
                _react2.default.createElement(
                  'div',
                  { className: 'col last custom-label' },
                  _react2.default.createElement(
                    'div',
                    null,
                    'CUSTOM:'
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'col last' },
                  _react2.default.createElement('input', {
                    type: 'text',
                    name: 'select-field-custom',
                    id: 'select-field-custom',
                    ref: function ref(input) {
                      return setFocus(input);
                    },
                    value: customValue,
                    onChange: function onChange(event) {
                      return onChangeCustom(event.target.value);
                    }
                  })
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'col last' },
                  _react2.default.createElement(
                    'div',
                    { className: 'row custom-buttons' },
                    _react2.default.createElement(
                      'div',
                      { className: 'col last' },
                      _react2.default.createElement(
                        'a',
                        { role: 'presentation', onClick: function onClick() {
                            return onApply();
                          } },
                        'Apply'
                      )
                    ),
                    _react2.default.createElement(
                      'div',
                      { className: 'col last pipe' },
                      '|'
                    ),
                    _react2.default.createElement(
                      'div',
                      { className: 'col last custom-select-clear-btn' },
                      _react2.default.createElement(
                        'a',
                        { role: 'presentation', onClick: function onClick() {
                            return onClear();
                          } },
                        'Clear'
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );

      // Always ensure hard binding input value has a value thats not undefined
      var hiddenValue = selectValue || defaultValue || '';

      // Render a readonly input to record the value for HTML5 form support

      return _react2.default.createElement(
        'div',
        { className: (0, _mergeClassNames.mergeClassNames)('select ' + (disabled ? 'disabled' : ''), className), id: (0, _getIdWithSuffix2.default)(this.props, 'container') },
        selectLabel && _react2.default.createElement(
          'label',
          { htmlFor: name },
          selectLabel
        ),
        _react2.default.createElement(
          'div',
          { className: 'select-wrapper' },
          _react2.default.createElement('input', { id: (0, _getIdWithSuffix2.default)(this.props, 'input-value'), type: 'hidden', name: name, value: hiddenValue, disabled: disabled }),
          _react2.default.createElement('div', { className: showMenu ? 'up-caret' : 'down-caret', role: 'presentation', onClick: function onClick() {
              return onToggleMenu(!showMenu);
            } }),
          _react2.default.createElement('input', {
            type: 'text',
            readOnly: true,
            value: currentLabel,
            onClick: function onClick() {
              return onToggleMenu(!showMenu);
            },
            id: (0, _getIdWithSuffix2.default)(this.props, 'input-on-click')
          }),
          showMenu && _children
        )
      );
    }
  }]);

  return SelectCustomFieldInput;
}(_react.Component);

SelectCustomFieldInput.propTypes = {
  name: _propTypes2.default.string.isRequired,
  children: _propTypes2.default.node.isRequired,
  onChange: _propTypes2.default.func,
  value: _propTypes2.default.string,
  label: _propTypes2.default.string,
  className: _propTypes2.default.string,
  defaultValue: _propTypes2.default.string,
  disabled: _propTypes2.default.bool
};

SelectCustomFieldInput.defaultProps = {
  onChange: function onChange() {},

  value: '',
  label: null,
  className: '',
  defaultValue: '',
  disabled: false
};

exports.default = {
  SelectCustomFieldInput: SelectCustomFieldInput
};