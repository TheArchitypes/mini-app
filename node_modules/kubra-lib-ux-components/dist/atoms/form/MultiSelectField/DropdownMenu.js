'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownMenu = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropdownMenu = exports.DropdownMenu = function (_Component) {
  _inherits(DropdownMenu, _Component);

  function DropdownMenu(props) {
    _classCallCheck(this, DropdownMenu);

    var _this = _possibleConstructorReturn(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).call(this, props));

    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(DropdownMenu, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.scrollSelectedItemIntoView();
    }
  }, {
    key: 'scrollSelectedItemIntoView',
    value: function scrollSelectedItemIntoView() {
      if (!this.list) return;
      var menu = this.list;
      if (!menu) return;
      var item = menu.querySelector('li.highlight');
      if (!item) return;
      var isOutOfUpperView = item.offsetTop < menu.scrollTop;
      var isOutOfLowerView = item.offsetTop + item.clientHeight > menu.scrollTop + menu.clientHeight;
      if (isOutOfUpperView) {
        menu.scrollTop = item.offsetTop;
      } else if (isOutOfLowerView) {
        menu.scrollTop = item.offsetTop + item.clientHeight - menu.clientHeight;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'ul',
        { ref: function ref(_ref) {
            _this2.list = _ref;
          } },
        this.props.menuItems.map(function (element, elementIndex) {
          var _element$props = element.props,
              value = _element$props.value,
              label = _element$props.label,
              elementId = _element$props.id;

          var childClassName = elementIndex === _this2.props.menuItems.length - 1 ? 'last-child' : '';
          var shouldHighlight = _this2.props.highlightIndex === elementIndex ? 'highlight' : '';
          return _react2.default.cloneElement(element, {
            key: 'option-' + elementIndex,
            onSelectValue: function onSelectValue() {
              _this2.props.onSelectedValue(value, label);
            },
            id: elementId,
            className: childClassName + ' ' + shouldHighlight
          });
        }),
        this.props.menuItems.length === 0 && _react2.default.createElement(
          'li',
          null,
          'No More Results.'
        )
      );
    }
  }]);

  return DropdownMenu;
}(_react.Component);

{
  var func = _propTypes2.default.func,
      arrayOf = _propTypes2.default.arrayOf,
      node = _propTypes2.default.node,
      number = _propTypes2.default.number;

  DropdownMenu.propTypes = {
    menuItems: arrayOf(node).isRequired,
    onSelectedValue: func.isRequired,
    highlightIndex: number.isRequired
  };
}

DropdownMenu.defaultProps = {
  searchText: ''
};

exports.default = DropdownMenu;