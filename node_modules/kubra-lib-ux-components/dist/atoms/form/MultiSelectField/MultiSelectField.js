'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiSelectField = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mergeClassNames = require('../../../lib/mergeClassNames');

var _getIdWithSuffix = require('../../../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

var _DropdownSearch = require('./DropdownSearch');

var _DropdownSearch2 = _interopRequireDefault(_DropdownSearch);

var _DropdownMenu = require('./DropdownMenu');

var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function reduceSelectedArray(views) {
  return views.map(function (view) {
    return view.value;
  });
}

var MultiSelectField = exports.MultiSelectField = function (_Component) {
  _inherits(MultiSelectField, _Component);

  function MultiSelectField(props) {
    _classCallCheck(this, MultiSelectField);

    var _this = _possibleConstructorReturn(this, (MultiSelectField.__proto__ || Object.getPrototypeOf(MultiSelectField)).call(this, props));

    _this.state = {
      showMenu: false,
      selectedArray: _this.buildSelectArray(),
      highlightIndex: -1,
      searchBox: ''
    };
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(MultiSelectField, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      this.setState(function () {
        return {
          selectedArray: _this2.buildSelectArray(nextProps)
        };
      });
    }
  }, {
    key: 'onSearchText',
    value: function onSearchText(event) {
      var value = event.target.value;
      this.setState(function () {
        return { searchBox: value, showMenu: true };
      });
    }
  }, {
    key: 'onSelectValue',
    value: function onSelectValue(selectValue, label) {
      var _this3 = this;

      if (_lodash2.default.includes(_lodash2.default.map(this.state.selectedArray, 'value'), selectValue)) {
        return;
      }
      this.setState(function (state) {
        return {
          selectedArray: [].concat(_toConsumableArray(state.selectedArray), [{
            value: selectValue,
            label: label
          }]),
          searchBox: '',
          highlightIndex: -1
        };
      }, function () {
        _this3.searchBox.focus();
        _this3.props.onChange(reduceSelectedArray(_this3.state.selectedArray));
      });
    }
  }, {
    key: 'onToggleMenu',
    value: function onToggleMenu(showMenu) {
      if (showMenu) {
        this.searchBox.focus();
      } else {
        this.searchBox.blur();
      }
      this.setState(function () {
        return {
          showMenu: showMenu
        };
      });
    }
  }, {
    key: 'onCancel',
    value: function onCancel(menuItem) {
      var _this4 = this;

      this.setState(function (state) {
        return {
          selectedArray: state.selectedArray.filter(function (selected) {
            return selected.value !== menuItem.value;
          })
        };
      }, function () {
        _this4.props.onChange(reduceSelectedArray(_this4.state.selectedArray));
      });
    }
  }, {
    key: 'onHighlightSelect',
    value: function onHighlightSelect() {
      if (this.state.highlightIndex < 0) {
        return;
      }
      var menuItem = this.searchFilteredUnselectedChildren[this.state.highlightIndex];
      if (menuItem.props) {
        this.onSelectValue(menuItem.props.value, menuItem.props.label);
      }
    }
  }, {
    key: 'onDeleteLastValue',
    value: function onDeleteLastValue() {
      var _this5 = this;

      if (this.state.searchBox.length > 0) {
        return;
      }
      this.setState(function (state) {
        return {
          selectedArray: state.selectedArray.slice(0, -1)
        };
      }, function () {
        _this5.props.onChange(reduceSelectedArray(_this5.state.selectedArray));
      });
    }
  }, {
    key: 'preventDisabled',
    value: function preventDisabled(callback) {
      if (!this.props.disabled) {
        return callback;
      }
      return function () {};
    }
  }, {
    key: 'incrementIndex',
    value: function incrementIndex(value) {
      var _this6 = this;

      this.setState(function (state) {
        var solution = state.highlightIndex + value;
        if (solution > _this6.searchFilteredUnselectedChildrenTotal - 1 || solution < 0) {
          return {};
        }
        return {
          highlightIndex: solution
        };
      });
    }
  }, {
    key: 'buildSelectArray',
    value: function buildSelectArray() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      var labels = _lodash2.default.reduce(props.children, function (acc, option) {
        return Object.assign({}, acc, _defineProperty({}, option.props.value, option.props.label));
      }, {});
      return props.value.map(function (value) {
        return {
          value: value,
          label: labels[value]
        };
      });
    }
  }, {
    key: 'buildCollections',
    value: function buildCollections(searchBox, selectedArray, children) {
      var _this7 = this;

      this.selectedValueHash = _lodash2.default.keyBy(selectedArray, 'value');
      this.unselectedChildren = children.filter(function (element) {
        return !_this7.selectedValueHash[element.props.value];
      });
      var searchRegexp = new RegExp(_lodash2.default.escapeRegExp(searchBox), 'i');
      this.searchFilteredUnselectedChildren = this.unselectedChildren.filter(function (element) {
        return _lodash2.default.isArray(element.props.label.match(searchRegexp));
      });
      this.searchFilteredUnselectedChildrenTotal = this.searchFilteredUnselectedChildren.length;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this8 = this;

      var _props = this.props,
          name = _props.name,
          children = _props.children,
          className = _props.className,
          defaultValue = _props.defaultValue,
          disabled = _props.disabled;

      var selectLabel = this.props.label;
      var _state = this.state,
          showMenu = _state.showMenu,
          selectValue = _state.selectValue,
          selectedArray = _state.selectedArray;
      var onToggleMenu = this.onToggleMenu;


      this.buildCollections(this.state.searchBox, this.state.selectedArray, children);

      // Always ensure hard binding input value has a value thats not undefined
      var hiddenValue = selectValue || defaultValue || '';

      // Render a readonly input to record the value for HTML5 form support
      return _react2.default.createElement(
        'div',
        {
          className: (0, _mergeClassNames.mergeClassNames)('multi-select ' + (disabled ? 'disabled' : ''), className),
          id: (0, _getIdWithSuffix2.default)(this.props, 'container')
        },
        selectLabel && _react2.default.createElement(
          'label',
          { htmlFor: name },
          selectLabel
        ),
        _react2.default.createElement(
          'div',
          { className: 'content' },
          _react2.default.createElement('input', {
            id: (0, _getIdWithSuffix2.default)(this.props, 'input-value'),
            type: 'hidden',
            name: name,
            value: hiddenValue,
            disabled: disabled
          }),
          _react2.default.createElement('button', {
            type: 'button',
            onClick: function onClick() {
              return onToggleMenu(!showMenu);
            },
            'data-glyph': 'x',
            className: showMenu ? 'expand close' : 'expand open',
            id: (0, _getIdWithSuffix2.default)(this.props, 'expand-toggle')
          }),
          _react2.default.createElement(
            'div',
            {
              onClick: function onClick() {
                return onToggleMenu(!showMenu);
              },
              role: 'button',
              className: 'select-container',
              tabIndex: '0',
              id: (0, _getIdWithSuffix2.default)(this.props, 'input-on-click')
            },
            _react2.default.createElement(
              'div',
              { className: 'search-box' },
              _react2.default.createElement(_DropdownSearch2.default, {
                refCallback: function refCallback(ref) {
                  _this8.searchBox = ref;
                },
                placeholder: this.props.placeholder,
                className: 'search-box',
                value: this.state.searchBox,
                onChange: this.onSearchText,
                onFocus: function onFocus() {
                  return _this8.onToggleMenu(true);
                },
                onBlur: function onBlur() {},
                onClick: this.preventDisabled(function () {
                  return _this8.onToggleMenu(true);
                }),
                onUpArrow: function onUpArrow() {
                  return _this8.incrementIndex(-1);
                },
                onDownArrow: function onDownArrow() {
                  return _this8.incrementIndex(1);
                },
                onEnter: this.preventDisabled(this.onHighlightSelect),
                onDelete: function onDelete() {
                  return _this8.onDeleteLastValue();
                },
                onEscape: function onEscape() {
                  return _this8.onToggleMenu(false);
                },
                id: 'dropdown-search'
              })
            ),
            selectedArray.length > 0 && _react2.default.createElement(
              'div',
              { className: 'menu-items' },
              selectedArray.map(function (selected) {
                return _react2.default.createElement(
                  'span',
                  {
                    role: 'presentation',
                    onClick: function onClick(event) {
                      return event.stopPropagation();
                    },
                    key: selected.value,
                    className: 'item',
                    id: 'menu-item-' + _lodash2.default.kebabCase(selected.label)
                  },
                  selected.label,
                  _react2.default.createElement('button', {
                    type: 'button',
                    className: 'cancel icon iconic',
                    'data-glyph': 'x',
                    id: 'cancel-menu-item-' + _lodash2.default.kebabCase(_lodash2.default.camelCase(selected.label)),
                    onClick: function onClick(event) {
                      event.stopPropagation();
                      _this8.preventDisabled(function () {
                        return _this8.onCancel(selected);
                      })();
                    }
                  })
                );
              })
            )
          ),
          showMenu && _react2.default.createElement(_DropdownMenu2.default, {
            menuItems: this.searchFilteredUnselectedChildren,
            onSelectedValue: this.preventDisabled(this.onSelectValue),
            highlightIndex: this.state.highlightIndex,
            searchText: this.state.searchBox
          })
        )
      );
    }
  }]);

  return MultiSelectField;
}(_react.Component);

MultiSelectField.propTypes = {
  name: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired,
  onChange: _propTypes2.default.func,
  placeholder: _propTypes2.default.string,
  // Eslint can't detect default arguments for this.props.value
  // eslint-disable-next-line
  value: _propTypes2.default.arrayOf(_propTypes2.default.string),
  label: _propTypes2.default.string,
  className: _propTypes2.default.string,
  defaultValue: _propTypes2.default.string,
  disabled: _propTypes2.default.bool
};

MultiSelectField.defaultProps = {
  onChange: function onChange() {},

  placeholder: 'Search...',
  value: [],
  name: '',
  label: null,
  className: '',
  defaultValue: '',
  disabled: false
};

exports.default = {
  MultiSelectField: MultiSelectField
};