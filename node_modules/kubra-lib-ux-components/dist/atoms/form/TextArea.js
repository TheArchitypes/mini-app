'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextArea = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mergeClassNames = require('../../lib/mergeClassNames');

var _htmlProps = require('../../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

var _twoWay = require('../../lib/twoWay');

var _twoWay2 = _interopRequireDefault(_twoWay);

var _getIdWithSuffix = require('../../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextArea = exports.TextArea = function (_Component) {
  _inherits(TextArea, _Component);

  function TextArea(props) {
    _classCallCheck(this, TextArea);

    var _this = _possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call(this, props));

    _this.state = {
      hasFocus: false,
      lastValue: props.value || '',
      indexForAutocomplete: '',
      autocompleteValue: '',
      autocompleteItemsToShow: [],
      showAutocomplete: false,
      onHover: null
    };
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(TextArea, [{
    key: 'onFocus',
    value: function onFocus() {
      this.setState({
        hasFocus: true
      });
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      if (this.state.onHover === null) {
        this.setState({
          hasFocus: false,
          onHover: null
        });
      }
    }
  }, {
    key: 'setCurrentOnHover',
    value: function setCurrentOnHover(index, numberOfItems) {
      if (numberOfItems.length > 0) {
        if (index === null) {
          this.setState({
            onHover: 0
          });
        } else if (index <= -1) {
          this.setState({
            onHover: numberOfItems.length - 1
          });
        } else {
          this.setState({
            onHover: index % numberOfItems.length
          });
        }
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      if (this.props.onChange) {
        this.props.onChange(e.target.value);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          name = _props.name,
          label = _props.label,
          hintText = _props.hintText,
          defaultValue = _props.defaultValue,
          disabled = _props.disabled,
          className = _props.className,
          onChange = _props.onChange,
          readOnly = _props.readOnly,
          resize = _props.resize,
          rows = _props.rows,
          value = _props.value,
          maxLength = _props.maxLength,
          wrap = _props.wrap;


      var inputId = (0, _getIdWithSuffix2.default)(this.props, 'input');
      var inputClassName = (0, _mergeClassNames.mergeClassNames)('' + (resize ? 'resizeable-text-area' : 'no-resize-text-area'), 'text-area');
      var _label = maxLength ? label + ' - Max ' + maxLength + ' Characters' : label;

      return _react2.default.createElement(
        'div',
        Object.assign({}, (0, _htmlProps2.default)(this.props), { className: (0, _mergeClassNames.mergeClassNames)('text-area', className) }),
        label && _react2.default.createElement(
          'label',
          { htmlFor: name },
          _label
        ),
        _react2.default.createElement('textarea', Object.assign({}, (0, _twoWay2.default)({ onChange: onChange, value: value }), {
          onChange: this.handleChange,
          className: inputClassName,
          name: name,
          disabled: disabled,
          defaultValue: defaultValue,
          placeholder: hintText,
          rows: rows,
          id: inputId,
          maxLength: maxLength,
          readOnly: readOnly,
          wrap: wrap
        }))
      );
    }
  }]);

  return TextArea;
}(_react.Component);

{
  var string = _propTypes2.default.string,
      oneOfType = _propTypes2.default.oneOfType,
      bool = _propTypes2.default.bool,
      number = _propTypes2.default.number,
      func = _propTypes2.default.func;

  TextArea.propTypes = {
    className: string,
    defaultValue: oneOfType([string, number]),
    disabled: bool,
    hintText: string.isRequired,
    label: string,
    maxLength: number,
    name: string.isRequired,
    onChange: func,
    readOnly: bool,
    resize: bool,
    rows: number,
    value: string,
    wrap: string
  };

  TextArea.defaultProps = {
    defaultValue: undefined,
    disabled: false,
    label: null,
    className: '',
    value: undefined,
    onChange: undefined,
    readOnly: false,
    resize: false,
    rows: 1,
    maxLength: undefined,
    wrap: ''
  };
}

exports.default = {
  TextArea: TextArea
};