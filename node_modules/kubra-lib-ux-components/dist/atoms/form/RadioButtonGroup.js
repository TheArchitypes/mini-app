'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioButtonGroup = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.RadioButton = RadioButton;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mergeClassNames = require('../../lib/mergeClassNames');

var _preventDefault = require('../../lib/preventDefault');

var _preventDefault2 = _interopRequireDefault(_preventDefault);

var _htmlProps = require('../../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

var _getIdWithSuffix = require('../../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RadioButtonGroup = exports.RadioButtonGroup = function (_Component) {
  _inherits(RadioButtonGroup, _Component);

  function RadioButtonGroup(props) {
    _classCallCheck(this, RadioButtonGroup);

    var _this = _possibleConstructorReturn(this, (RadioButtonGroup.__proto__ || Object.getPrototypeOf(RadioButtonGroup)).call(this, props));

    _this.state = _this.defaultState();
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(RadioButtonGroup, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var value = _ref.value;

      if (value === undefined) {
        return;
      }
      this.setState(function () {
        return { value: value };
      });
    }
  }, {
    key: 'onSelect',
    value: function onSelect(value) {
      this.setState(function () {
        return {
          value: value
        };
      });
    }
  }, {
    key: 'defaultState',
    value: function defaultState() {
      return {
        value: this.props.value || this.props.defaultValue || this.props.defaultSelected || ''
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          name = _props.name,
          className = _props.className,
          onChange = _props.onChange;
      var onSelect = this.onSelect;


      var _onChange = function _onChange(value) {
        if (value !== _this2.state.value) {
          onSelect(value);
          onChange(value);
        }
      };

      var isSelected = function isSelected(value) {
        return _this2.state.value === value;
      };
      return _react2.default.createElement(
        'div',
        Object.assign({}, (0, _htmlProps2.default)(this.props), { className: (0, _mergeClassNames.mergeClassNames)('radio-button-group', className) }),
        children.map(function (radioButton, index) {
          return _react2.default.cloneElement(radioButton, {
            name: name,
            key: 'radio-button-' + index,
            checked: isSelected(radioButton.props.value),
            onSelect: _onChange,
            id: radioButton.props.id
          });
        })
      );
    }
  }]);

  return RadioButtonGroup;
}(_react.Component);

RadioButtonGroup.propTypes = {
  children: _propTypes2.default.node.isRequired,
  name: _propTypes2.default.string.isRequired,
  defaultValue: _propTypes2.default.string,
  defaultSelected: _propTypes2.default.string,
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  className: _propTypes2.default.string
};

RadioButtonGroup.defaultProps = {
  className: '',
  onChange: function onChange() {},

  defaultValue: undefined,
  defaultSelected: undefined,
  value: undefined
};

function RadioButton(props) {
  var value = props.value,
      name = props.name,
      label = props.label,
      checked = props.checked,
      className = props.className,
      onSelect = props.onSelect;

  return _react2.default.createElement(
    'div',
    Object.assign({}, (0, _htmlProps2.default)(props), { className: (0, _mergeClassNames.mergeClassNames)('radio-button', className) }),
    _react2.default.createElement('input', {
      readOnly: true,
      type: 'radio',
      value: value,
      name: name,
      checked: checked,
      id: (0, _getIdWithSuffix2.default)(props, 'input')
    }),
    _react2.default.createElement(
      'a',
      { href: '', onClick: (0, _preventDefault2.default)(function () {
          return onSelect(value);
        }), id: (0, _getIdWithSuffix2.default)(props, 'on-click-link') },
      _react2.default.createElement(
        'label',
        { htmlFor: name, id: (0, _getIdWithSuffix2.default)(props, 'label') },
        label
      )
    )
  );
}

RadioButton.propTypes = {
  value: _propTypes2.default.string.isRequired,
  name: _propTypes2.default.string,
  label: _propTypes2.default.string.isRequired,
  className: _propTypes2.default.string,
  // Injected
  checked: _propTypes2.default.bool,
  onSelect: _propTypes2.default.func
};

RadioButton.defaultProps = {
  onSelect: function onSelect() {},

  name: null,
  className: '',
  checked: false
};

exports.default = {
  RadioButtonGroup: RadioButtonGroup,
  RadioButton: RadioButton
};