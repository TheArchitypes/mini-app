'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccordionField = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mergeClassNames = require('../../lib/mergeClassNames');

var _getIdWithSuffix = require('../../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AccordionField = exports.AccordionField = function (_Component) {
  _inherits(AccordionField, _Component);

  function AccordionField(props) {
    _classCallCheck(this, AccordionField);

    var _this = _possibleConstructorReturn(this, (AccordionField.__proto__ || Object.getPrototypeOf(AccordionField)).call(this, props));

    _this.state = {
      showContents: props.showContents
    };
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(AccordionField, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var showContents = _ref.showContents;

      if (showContents === this.state.showContents) {
        return;
      }
      this.setState(function () {
        return { showContents: showContents };
      });
    }
  }, {
    key: 'onToggleMenu',
    value: function onToggleMenu(showContents) {
      if (!this.props.disabled) {
        this.setState(function () {
          return {
            showContents: showContents
          };
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          className = _props.className,
          contents = _props.contents,
          maxHeight = _props.maxHeight,
          disabled = _props.disabled,
          _onClick = _props.onClick,
          expandId = _props.expandId,
          disableRowClick = _props.disableRowClick;
      var showContents = this.state.showContents;
      var onToggleMenu = this.onToggleMenu;


      return _react2.default.createElement(
        'div',
        {
          className: (0, _mergeClassNames.mergeClassNames)('select ' + (disabled ? 'disabled' : '') + ' ' + (showContents ? 'open' : ''), className),
          id: (0, _getIdWithSuffix2.default)(this.props, 'container')
        },
        _react2.default.createElement(
          'div',
          { className: 'accordion' },
          _react2.default.createElement('button', { type: 'button', id: expandId, onClick: function onClick() {
              onToggleMenu(!showContents);_onClick();
            }, className: 'accordion-expand icon iconic', 'data-glyph': showContents ? 'minus' : 'plus' }),
          _react2.default.createElement(
            'div',
            {
              onClick: function onClick() {
                if (!disableRowClick) {
                  onToggleMenu(!showContents);_onClick();
                }
              },
              role: 'button',
              className: disableRowClick ? 'accordion-container no-pointer' : 'accordion-container pointer',
              tabIndex: '0'
            },
            _react2.default.createElement(
              'span',
              { className: 'accordion-placeholder' },
              label
            )
          ),
          _react2.default.createElement(
            'div',
            { className: showContents ? 'accordion-contents open' : 'accordion-contents', style: { maxHeight: maxHeight } },
            contents
          )
        )
      );
    }
  }]);

  return AccordionField;
}(_react.Component);

AccordionField.propTypes = {
  label: _propTypes2.default.oneOfType([_propTypes2.default.shape({}), _propTypes2.default.string]),
  className: _propTypes2.default.string,
  showContents: _propTypes2.default.bool,
  contents: _propTypes2.default.oneOfType([_propTypes2.default.shape({}), _propTypes2.default.string]),
  maxHeight: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,
  expandId: _propTypes2.default.string,
  disableRowClick: _propTypes2.default.bool
};

AccordionField.defaultProps = {
  label: null,
  className: '',
  showContents: false,
  contents: {},
  maxHeight: '100%',
  disabled: false,
  onClick: function onClick() {},
  expandId: '',
  disableRowClick: false
};

exports.default = {
  AccordionField: AccordionField
};