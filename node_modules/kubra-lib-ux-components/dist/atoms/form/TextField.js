'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextField = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _mergeClassNames = require('../../lib/mergeClassNames');

var _htmlProps = require('../../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

var _twoWay = require('../../lib/twoWay');

var _twoWay2 = _interopRequireDefault(_twoWay);

var _getIdWithSuffix = require('../../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

var _getStringDifference = require('../../lib/getStringDifference');

var _getStringDifference2 = _interopRequireDefault(_getStringDifference);

var _getCaretPos = require('../../lib/getCaretPos');

var _getCaretPos2 = _interopRequireDefault(_getCaretPos);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextField = exports.TextField = function (_Component) {
  _inherits(TextField, _Component);

  function TextField(props) {
    _classCallCheck(this, TextField);

    var _this = _possibleConstructorReturn(this, (TextField.__proto__ || Object.getPrototypeOf(TextField)).call(this, props));

    _this.state = {
      hasFocus: false,
      lastValue: props.value || '',
      indexForAutocomplete: '',
      autocompleteValue: '',
      autocompleteItemsToShow: [],
      showAutocomplete: false,
      onHover: null
    };
    (0, _classAutobind2.default)(_this);
    return _this;
  }

  _createClass(TextField, [{
    key: 'onFocus',
    value: function onFocus() {
      this.setState({
        hasFocus: true
      });
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      if (this.state.onHover === null) {
        this.setState({
          hasFocus: false,
          showAutocomplete: false,
          onHover: null
        });
      }
    }
  }, {
    key: 'onClickAutocompleteItem',
    value: function onClickAutocompleteItem(item) {
      var _this2 = this;

      return function () {
        var _state = _this2.state,
            indexForAutocomplete = _state.indexForAutocomplete,
            lastValue = _state.lastValue;


        var nextValue = lastValue.slice(0, indexForAutocomplete - 1) + item.label + lastValue.slice(indexForAutocomplete - 1);
        _this2.props.onChange(nextValue);
        _this2.hideAutocomplete(nextValue);
      };
    }
  }, {
    key: 'onMouseOverAutocompleteItem',
    value: function onMouseOverAutocompleteItem(index) {
      var _this3 = this;

      return function () {
        _this3.setState({
          onHover: index
        });
      };
    }
  }, {
    key: 'onMouseOutAutocompleteItem',
    value: function onMouseOutAutocompleteItem(index) {
      var _this4 = this;

      return function () {
        if (_this4.state.onHover === index) {
          _this4.setState({
            onHover: null
          });
        }
      };
    }
  }, {
    key: 'onKeyUp',
    value: function onKeyUp(e) {
      var _state2 = this.state,
          onHover = _state2.onHover,
          autocompleteItemsToShow = _state2.autocompleteItemsToShow,
          showAutocomplete = _state2.showAutocomplete;


      if (showAutocomplete) {
        switch (e.keyCode) {
          case 38:
            // up arrow
            this.setCurrentOnHover(onHover !== null ? onHover - 1 : 0, autocompleteItemsToShow);
            break;
          case 40:
            // down arrow
            this.setCurrentOnHover(onHover !== null ? onHover + 1 : 0, autocompleteItemsToShow);
            break;
          case 9: // tab
          case 13:
            // enter
            e.preventDefault();
            if (autocompleteItemsToShow[onHover]) {
              this.onClickAutocompleteItem(autocompleteItemsToShow[onHover])();
            }
            break;
          case 27:
            // esc
            this.hideAutocomplete();
            break;
          default:
            break;
        }
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var showAutocomplete = this.state.showAutocomplete;


      if (showAutocomplete) {
        switch (e.keyCode) {
          case 38: // up arrow
          case 40: // down arrow
          case 9: // tab
          case 13:
            // enter
            // Prevent default behaviour. Needs to be done in onKeyDown.
            e.preventDefault();
            break;
          default:
            break;
        }
      }
    }
  }, {
    key: 'setCurrentOnHover',
    value: function setCurrentOnHover(index, numberOfItems) {
      if (numberOfItems.length > 0) {
        if (index === null) {
          this.setState({
            onHover: 0
          });
        } else if (index <= -1) {
          this.setState({
            onHover: numberOfItems.length - 1
          });
        } else {
          this.setState({
            onHover: index % numberOfItems.length
          });
        }
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      if (this.props.onChange) {
        this.props.onChange(e.target.value);
      }
      if (this.props.autocompleteItems.length > 0) {
        this.handleAutocomplete(e.target.value, (0, _getCaretPos2.default)(e.target));
      }
    }
  }, {
    key: 'handleAutocomplete',
    value: function handleAutocomplete(value, caretPos) {
      var autocompleteItems = this.props.autocompleteItems;
      var _state3 = this.state,
          showAutocomplete = _state3.showAutocomplete,
          lastValue = _state3.lastValue;

      var autocompleteItemsToShow = [];
      var autocompleteIdentifierCount = ((value || '').match(/\$/g) || []).length - ((lastValue || '').match(/\$/g) || []).length;

      if (!showAutocomplete && autocompleteIdentifierCount > 0) {
        // if autocompleteItems has an item that starts with the last letter, show autocomplete
        autocompleteItemsToShow = autocompleteItems;
        if (autocompleteItemsToShow.length > 0) {
          this.setState({
            showAutocomplete: true,
            autocompleteItemsToShow: autocompleteItemsToShow,
            autocompleteValue: '$',
            indexForAutocomplete: caretPos
          });
        } else {
          this.setState({
            lastValue: value
          });
        }
      } else if (showAutocomplete) {
        if (autocompleteIdentifierCount > 1) {
          this.hideAutocomplete(value);
          return;
        }
        // if a letter was added, Add last letter typed to autocompleteValue
        var nextAutocompleteValue = (0, _getStringDifference2.default)(value, lastValue);

        if (_lodash2.default.isEmpty(nextAutocompleteValue)) {
          this.hideAutocomplete(value);
          return;
        }
        autocompleteItemsToShow = autocompleteItems.filter(function (item) {
          return item.label.toLowerCase().indexOf(nextAutocompleteValue.toLowerCase()) > -1;
        });

        if (autocompleteItemsToShow.length > 0) {
          this.setState({
            autocompleteItemsToShow: autocompleteItemsToShow,
            autocompleteValue: nextAutocompleteValue
          });
        } else {
          this.hideAutocomplete(value);
        }
      } else {
        this.setState({
          lastValue: value
        });
      }
    }
  }, {
    key: 'hideAutocomplete',
    value: function hideAutocomplete(value) {
      this.setState({
        showAutocomplete: false,
        lastValue: value,
        onHover: null
      });
    }
  }, {
    key: 'autocompleteProps',
    value: function autocompleteProps() {
      var autocompleteItems = this.props.autocompleteItems;

      if (autocompleteItems.length > 0) {
        return {
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onKeyUp: this.onKeyUp,
          onKeyDown: this.onKeyDown,
          autoComplete: 'off' // Ignore browser's default autocomplete functionality
        };
      }
      return {};
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var _props = this.props,
          name = _props.name,
          type = _props.type,
          label = _props.label,
          hintText = _props.hintText,
          defaultValue = _props.defaultValue,
          disabled = _props.disabled,
          className = _props.className,
          onChange = _props.onChange,
          value = _props.value,
          hexCode = _props.hexCode,
          iconic = _props.iconic,
          autocompleteItems = _props.autocompleteItems,
          maxLength = _props.maxLength,
          disableMaxLengthLabel = _props.disableMaxLengthLabel;
      var _state4 = this.state,
          showAutocomplete = _state4.showAutocomplete,
          autocompleteItemsToShow = _state4.autocompleteItemsToShow,
          onHover = _state4.onHover;


      var inputId = (0, _getIdWithSuffix2.default)(this.props, 'input');
      var inputClassName = (0, _mergeClassNames.mergeClassNames)('' + (hexCode || iconic ? 'input-hex-code' : ''), 'text-field');
      var hasAutocomplete = autocompleteItems.length > 0;
      var _label = maxLength && !disableMaxLengthLabel ? label + ' - Max ' + maxLength + ' Characters' : label;

      return _react2.default.createElement(
        'div',
        Object.assign({}, (0, _htmlProps2.default)(this.props), { className: (0, _mergeClassNames.mergeClassNames)('text-field ' + (hasAutocomplete ? 'autocomplete' : ''), className) }),
        label && _react2.default.createElement(
          'label',
          { htmlFor: name },
          _label
        ),
        _react2.default.createElement('input', Object.assign({}, (0, _twoWay2.default)({ onChange: onChange, value: value }), this.autocompleteProps(), {
          onChange: this.handleChange,
          type: type,
          className: inputClassName,
          name: name,
          disabled: disabled,
          defaultValue: defaultValue,
          placeholder: hintText,
          id: inputId,
          maxLength: maxLength
        })),
        hexCode && _react2.default.createElement('div', { className: 'input-hex-code-swatch', style: { backgroundColor: '' + value } }),
        iconic && _react2.default.createElement('span', { className: 'input-iconic-swatch icon iconic small', 'data-glyph': value }),
        showAutocomplete && _react2.default.createElement(
          'div',
          { className: 'autocomplete-menu' },
          autocompleteItemsToShow.map(function (item, index) {
            return _react2.default.createElement(
              'a',
              {
                key: item.id,
                className: 'autocomplete-item ' + (onHover === index ? 'hover' : ''),
                href: '#' + index,
                onClick: _this5.onClickAutocompleteItem(item),
                onMouseOver: _this5.onMouseOverAutocompleteItem(index),
                onMouseOut: _this5.onMouseOutAutocompleteItem(index)
              },
              item.label
            );
          })
        )
      );
    }
  }]);

  return TextField;
}(_react.Component);

{
  var string = _propTypes2.default.string,
      oneOfType = _propTypes2.default.oneOfType,
      bool = _propTypes2.default.bool,
      number = _propTypes2.default.number,
      func = _propTypes2.default.func,
      arrayOf = _propTypes2.default.arrayOf,
      shape = _propTypes2.default.shape;

  TextField.propTypes = {
    defaultValue: oneOfType([string, number]),
    type: string,
    name: string.isRequired,
    hintText: string.isRequired,
    disabled: bool,
    label: string,
    className: string,
    value: string,
    onChange: func,
    hexCode: bool,
    iconic: bool,
    autocompleteItems: arrayOf(shape({})),
    maxLength: number,
    disableMaxLengthLabel: bool
  };

  TextField.defaultProps = {
    defaultValue: undefined,
    disabled: false,
    type: 'text',
    label: null,
    className: '',
    value: undefined,
    onChange: undefined,
    hexCode: false,
    iconic: false,
    autocompleteItems: [],
    maxLength: undefined,
    disableMaxLengthLabel: false
  };
}

exports.default = {
  TextField: TextField
};