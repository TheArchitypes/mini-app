'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrderTable = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classAutobind = require('class-autobind');

var _classAutobind2 = _interopRequireDefault(_classAutobind);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function createCollection(items, idPath, orderPath) {
  return _lodash2.default.map(items, function (item, index) {
    return {
      id: _lodash2.default.get(item, idPath, index),
      order: _lodash2.default.get(item, orderPath, index + 1),
      data: item
    };
  });
}

var OrderTable = exports.OrderTable = function (_Component) {
  _inherits(OrderTable, _Component);

  function OrderTable(props) {
    _classCallCheck(this, OrderTable);

    var _this = _possibleConstructorReturn(this, (OrderTable.__proto__ || Object.getPrototypeOf(OrderTable)).call(this, props));

    (0, _classAutobind2.default)(_this);
    _this.state = {
      collection: createCollection(_this.props.items, _this.props.idPath, _this.props.orderPath),
      form: createCollection(_this.props.items, _this.props.idPath, _this.props.orderPath),
      error: undefined
    };
    return _this;
  }

  _createClass(OrderTable, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        orderTable: {
          updateHandler: this.updateHandler,
          items: this.props.items,
          collection: this.state.collection,
          form: this.state.form,
          idPath: this.props.idPath,
          orderPath: this.props.orderPath
        }
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        collection: createCollection(nextProps.items, this.props.idPath, this.props.orderPath)
      });
    }
  }, {
    key: 'handleSubmit',
    value: function handleSubmit() {
      var _props = this.props,
          onSubmit = _props.onSubmit,
          orderPath = _props.orderPath;

      onSubmit(_lodash2.default.sortBy(this.state.collection, 'order').map(function (item) {
        if (orderPath) {
          return Object.assign({}, item.data, _defineProperty({}, orderPath, Number(item.order)));
        }
        return item.data;
      }));
    }
  }, {
    key: 'updateHandler',
    value: function updateHandler(id) {
      var _this2 = this;

      return function (orderValue) {
        _this2.setState({
          form: _lodash2.default.map(_this2.state.form, function (formItem) {
            if (formItem.id === id) {
              return Object.assign({}, formItem, {
                order: orderValue
              });
            }
            return formItem;
          })
        });
      };
    }
  }, {
    key: 'validate',
    value: function validate() {
      var _state = this.state,
          form = _state.form,
          collection = _state.collection;

      var validRange = _lodash2.default.range(1, collection.length + 1);
      var formRange = _lodash2.default.map(form, function (item) {
        return Number(item.order);
      });
      var diff = _lodash2.default.difference(validRange, formRange);
      if (diff.length !== 0) {
        this.setState({ error: 'Order is not valid. Missing values: ' + diff.join(', ') + '.' });
        return false;
      }
      this.setState({ error: undefined });
      return true;
    }
  }, {
    key: 'updateOrder',
    value: function updateOrder(cb) {
      if (!this.validate()) {
        return;
      }
      this.setState({
        collection: _lodash2.default.cloneDeep(this.state.form)
      }, cb);
    }
  }, {
    key: 'render',
    value: function render() {
      var updateOrder = this.updateOrder,
          handleSubmit = this.handleSubmit;
      var error = this.state.error;

      return _react2.default.Children.only(this.props.children(updateOrder, handleSubmit, error));
    }
  }]);

  return OrderTable;
}(_react.Component);

{
  var func = _propTypes2.default.func,
      shape = _propTypes2.default.shape,
      arrayOf = _propTypes2.default.arrayOf,
      oneOfType = _propTypes2.default.oneOfType,
      string = _propTypes2.default.string,
      number = _propTypes2.default.number;

  OrderTable.propTypes = {
    items: oneOfType([arrayOf(shape({})), arrayOf(string), arrayOf(number)]).isRequired,
    onSubmit: func.isRequired,
    children: func.isRequired,
    orderPath: string,
    idPath: string
  };
  OrderTable.defaultProps = {
    idPath: undefined,
    orderPath: undefined
  };
  OrderTable.childContextTypes = {
    orderTable: shape({
      form: arrayOf(shape({})).isRequired,
      updateHandler: func.isRequired,
      collection: arrayOf(shape({})).isRequired
    }).isRequired
  };
}

exports.default = OrderTable;