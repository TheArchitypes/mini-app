'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavItemWithSubItems = undefined;
exports.NavTitle = NavTitle;
exports.NavItem = NavItem;
exports.NavContainer = NavContainer;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mergeClassNames = require('../lib/mergeClassNames');

var _htmlProps = require('../lib/htmlProps');

var _htmlProps2 = _interopRequireDefault(_htmlProps);

var _icons = require('../atoms/icons');

var _getIdWithSuffix = require('../lib/getIdWithSuffix');

var _getIdWithSuffix2 = _interopRequireDefault(_getIdWithSuffix);

var _NavItemWithSubItems2 = require('../atoms/navigation/NavItemWithSubItems');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NavItemWithSubItems = exports.NavItemWithSubItems = _NavItemWithSubItems2.NavItemWithSubItems;

function NavTitle(props) {
  var linkTo = props.linkTo,
      label = props.label,
      disabled = props.disabled,
      className = props.className,
      activeClassName = props.activeClassName,
      overrideLinkClass = props.overrideLinkClass;

  // If no overrideLinkClass, use Link.

  var OverrideLink = overrideLinkClass || _reactRouter.Link;
  var linkProps = overrideLinkClass ? {
    // Props for Router 4 Link
    activeclassname: (0, _mergeClassNames.mergeClassNames)('active', activeClassName)
  } : {
    // Props for Router 3 Link
    activeClassName: (0, _mergeClassNames.mergeClassNames)('active', activeClassName)
  };

  return _react2.default.createElement(
    OverrideLink,
    Object.assign({
      className: (0, _mergeClassNames.mergeClassNames)('nav-title', className)
    }, (0, _htmlProps2.default)(props), {
      to: linkTo
    }, linkProps, {
      disabled: disabled
    }),
    _react2.default.createElement(
      'div',
      null,
      label
    )
  );
}

NavTitle.propTypes = {
  linkTo: _propTypes2.default.string,
  label: _propTypes2.default.string.isRequired,
  disabled: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  activeClassName: _propTypes2.default.string,
  overrideLinkClass: _propTypes2.default.func
};

NavTitle.defaultProps = {
  linkTo: '',
  disabled: false,
  onSelectValue: function onSelectValue() {},

  className: '',
  activeClassName: '',
  overrideLinkClass: null
};

function NavItem(props) {
  var linkTo = props.linkTo,
      label = props.label,
      disabled = props.disabled,
      className = props.className,
      icon = props.icon,
      activeClassName = props.activeClassName,
      overrideLinkClass = props.overrideLinkClass;

  // If no overrideLinkClass, use Link.

  var OverrideLink = overrideLinkClass || _reactRouter.Link;
  var linkProps = overrideLinkClass ? {
    // Props for Router 4 Link
    activeclassname: (0, _mergeClassNames.mergeClassNames)('active', activeClassName)
  } : {
    // Props for Router 3 Link
    activeClassName: (0, _mergeClassNames.mergeClassNames)('active', activeClassName)
  };

  return _react2.default.createElement(
    OverrideLink,
    Object.assign({
      className: (0, _mergeClassNames.mergeClassNames)('nav-item', className)
    }, (0, _htmlProps2.default)(props), {
      to: linkTo
    }, linkProps, {
      disabled: disabled
    }),
    _react2.default.createElement(
      'li',
      { id: (0, _getIdWithSuffix2.default)(props, 'li') },
      _react2.default.createElement(_icons.Icon, { className: icon + ' small', name: icon }),
      _react2.default.createElement(
        'span',
        { className: 'label' },
        label
      )
    )
  );
}

NavItem.propTypes = {
  linkTo: _propTypes2.default.string.isRequired,
  label: _propTypes2.default.string.isRequired,
  disabled: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  activeClassName: _propTypes2.default.string,
  icon: _propTypes2.default.string,
  overrideLinkClass: _propTypes2.default.func
};

NavItem.defaultProps = {
  disabled: false,
  onSelectValue: function onSelectValue() {},

  className: '',
  activeClassName: '',
  icon: '',
  overrideLinkClass: null
};

function NavContainer(props) {
  var children = props.children,
      className = props.className,
      topPadding = props.topPadding;

  return _react2.default.createElement(
    'div',
    Object.assign({
      className: (0, _mergeClassNames.mergeClassNames)('nav-container', className)
    }, (0, _htmlProps2.default)(props)),
    _react2.default.createElement('div', { className: 'top-padding', style: { flex: '0 0 ' + topPadding } }),
    _react2.default.createElement(
      'div',
      { className: 'scroll' },
      children
    )
  );
}

NavContainer.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  topPadding: _propTypes2.default.string
};

NavContainer.defaultProps = {
  className: '',
  topPadding: 0
};

exports.default = {
  NavTitle: NavTitle,
  NavItem: NavItem,
  NavContainer: NavContainer,
  NavItemWithSubItems: NavItemWithSubItems
};